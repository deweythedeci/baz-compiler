
// Generated from antlr/Baz.g4 by ANTLR 4.12.0


#include "BazLexer.h"


using namespace antlr4;

using namespace parse;


using namespace antlr4;

namespace {

struct BazLexerStaticData final {
  BazLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  BazLexerStaticData(const BazLexerStaticData&) = delete;
  BazLexerStaticData(BazLexerStaticData&&) = delete;
  BazLexerStaticData& operator=(const BazLexerStaticData&) = delete;
  BazLexerStaticData& operator=(BazLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag bazlexerLexerOnceFlag;
BazLexerStaticData *bazlexerLexerStaticData = nullptr;

void bazlexerLexerInitialize() {
  assert(bazlexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<BazLexerStaticData>(
    std::vector<std::string>{
      "DIGIT", "LETTER", "UNDERSCORE", "WS", "EOL", "SQUOTE", "DQUOTE", 
      "BSLASH", "SCOMMENT", "MCOMMENT", "OR", "AND", "EQUAL", "NOTEQUAL", 
      "BITLSHIFT", "BITRSHIFT", "GREATEREQ", "LESSEQ", "GREATER", "LESS", 
      "ADD", "SUBTRACT", "MULTIPLY", "DIVIDE", "MODULUS", "NOT", "BITOR", 
      "BITAND", "BITNOT", "BITXOR", "ACCESS", "ASSIGN", "OBRACK", "CBRACK", 
      "OBRACE", "CBRACE", "OPAREN", "CPAREN", "COMMA", "EOS", "BOOL", "CHAR", 
      "INT", "LONG", "REAL", "TRUE", "FALSE", "VOID", "BREAK", "RETURN", 
      "END", "BLOCK", "IF", "ELSE", "DOWHILE", "WHILE", "FOR", "CLASS", 
      "SYSCALL", "ESCSEQ", "ESCLINE", "ESCTAB", "ESCRET", "INTLIT", "REALLIT", 
      "CHARLIT", "STRINGLIT", "NAME"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "", "", "'''", "'\"'", "'\\'", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "'n'", "'t'", "'r'"
    },
    std::vector<std::string>{
      "", "WS", "EOL", "SQUOTE", "DQUOTE", "BSLASH", "SCOMMENT", "MCOMMENT", 
      "OR", "AND", "EQUAL", "NOTEQUAL", "BITLSHIFT", "BITRSHIFT", "GREATEREQ", 
      "LESSEQ", "GREATER", "LESS", "ADD", "SUBTRACT", "MULTIPLY", "DIVIDE", 
      "MODULUS", "NOT", "BITOR", "BITAND", "BITNOT", "BITXOR", "ACCESS", 
      "ASSIGN", "OBRACK", "CBRACK", "OBRACE", "CBRACE", "OPAREN", "CPAREN", 
      "COMMA", "EOS", "BOOL", "CHAR", "INT", "LONG", "REAL", "TRUE", "FALSE", 
      "VOID", "BREAK", "RETURN", "END", "BLOCK", "IF", "ELSE", "DOWHILE", 
      "WHILE", "FOR", "CLASS", "SYSCALL", "ESCSEQ", "ESCLINE", "ESCTAB", 
      "ESCRET", "INTLIT", "REALLIT", "CHARLIT", "STRINGLIT", "NAME"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,65,781,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,1,0,1,0,1,1,1,1,1,2,1,2,
  	1,3,4,3,145,8,3,11,3,12,3,146,1,3,1,3,1,4,3,4,152,8,4,1,4,1,4,1,4,1,4,
  	1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,5,8,166,8,8,10,8,12,8,169,9,8,1,8,1,8,
  	3,8,173,8,8,1,8,5,8,176,8,8,10,8,12,8,179,9,8,1,8,1,8,1,9,1,9,1,9,1,9,
  	1,9,5,9,188,8,9,10,9,12,9,191,9,9,1,9,1,9,1,9,1,9,1,9,5,9,198,8,9,10,
  	9,12,9,201,9,9,1,9,1,9,1,10,1,10,1,10,1,10,5,10,209,8,10,10,10,12,10,
  	212,9,10,1,11,1,11,1,11,1,11,5,11,218,8,11,10,11,12,11,221,9,11,1,12,
  	1,12,1,12,1,12,5,12,227,8,12,10,12,12,12,230,9,12,1,13,1,13,1,13,1,13,
  	5,13,236,8,13,10,13,12,13,239,9,13,1,14,1,14,1,14,1,14,5,14,245,8,14,
  	10,14,12,14,248,9,14,1,15,1,15,1,15,1,15,5,15,254,8,15,10,15,12,15,257,
  	9,15,1,16,1,16,1,16,1,16,5,16,263,8,16,10,16,12,16,266,9,16,1,17,1,17,
  	1,17,1,17,5,17,272,8,17,10,17,12,17,275,9,17,1,18,1,18,5,18,279,8,18,
  	10,18,12,18,282,9,18,1,19,1,19,5,19,286,8,19,10,19,12,19,289,9,19,1,20,
  	1,20,5,20,293,8,20,10,20,12,20,296,9,20,1,21,1,21,5,21,300,8,21,10,21,
  	12,21,303,9,21,1,22,1,22,5,22,307,8,22,10,22,12,22,310,9,22,1,23,1,23,
  	5,23,314,8,23,10,23,12,23,317,9,23,1,24,1,24,5,24,321,8,24,10,24,12,24,
  	324,9,24,1,25,1,25,5,25,328,8,25,10,25,12,25,331,9,25,1,26,1,26,5,26,
  	335,8,26,10,26,12,26,338,9,26,1,27,1,27,5,27,342,8,27,10,27,12,27,345,
  	9,27,1,28,1,28,5,28,349,8,28,10,28,12,28,352,9,28,1,29,1,29,5,29,356,
  	8,29,10,29,12,29,359,9,29,1,30,1,30,5,30,363,8,30,10,30,12,30,366,9,30,
  	1,31,1,31,5,31,370,8,31,10,31,12,31,373,9,31,1,32,1,32,5,32,377,8,32,
  	10,32,12,32,380,9,32,1,33,1,33,5,33,384,8,33,10,33,12,33,387,9,33,1,34,
  	1,34,5,34,391,8,34,10,34,12,34,394,9,34,1,35,1,35,5,35,398,8,35,10,35,
  	12,35,401,9,35,1,36,1,36,5,36,405,8,36,10,36,12,36,408,9,36,1,36,1,36,
  	1,37,1,37,5,37,414,8,37,10,37,12,37,417,9,37,1,37,1,37,1,38,1,38,5,38,
  	423,8,38,10,38,12,38,426,9,38,1,38,1,38,1,39,1,39,5,39,432,8,39,10,39,
  	12,39,435,9,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,5,40,445,8,40,
  	10,40,12,40,448,9,40,1,41,1,41,1,41,1,41,1,41,1,41,5,41,456,8,41,10,41,
  	12,41,459,9,41,1,42,1,42,1,42,1,42,1,42,5,42,466,8,42,10,42,12,42,469,
  	9,42,1,43,1,43,1,43,1,43,1,43,1,43,5,43,477,8,43,10,43,12,43,480,9,43,
  	1,44,1,44,1,44,1,44,1,44,1,44,5,44,488,8,44,10,44,12,44,491,9,44,1,45,
  	1,45,1,45,1,45,1,45,1,45,5,45,499,8,45,10,45,12,45,502,9,45,1,46,1,46,
  	1,46,1,46,1,46,1,46,1,46,5,46,511,8,46,10,46,12,46,514,9,46,1,47,1,47,
  	1,47,1,47,1,47,1,47,5,47,522,8,47,10,47,12,47,525,9,47,1,48,1,48,1,48,
  	1,48,1,48,1,48,1,48,5,48,534,8,48,10,48,12,48,537,9,48,1,48,1,48,1,49,
  	1,49,1,49,1,49,1,49,1,49,1,49,1,49,5,49,549,8,49,10,49,12,49,552,9,49,
  	1,49,1,49,1,50,1,50,1,50,1,50,1,50,5,50,561,8,50,10,50,12,50,564,9,50,
  	1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,51,1,51,5,51,575,8,51,10,51,12,51,
  	578,9,51,1,51,1,51,1,52,1,52,1,52,1,52,5,52,586,8,52,10,52,12,52,589,
  	9,52,1,52,1,52,1,53,1,53,1,53,1,53,1,53,1,53,5,53,599,8,53,10,53,12,53,
  	602,9,53,1,53,1,53,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,5,54,
  	615,8,54,10,54,12,54,618,9,54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,1,55,
  	1,55,5,55,629,8,55,10,55,12,55,632,9,55,1,55,1,55,1,56,1,56,1,56,1,56,
  	1,56,5,56,641,8,56,10,56,12,56,644,9,56,1,56,1,56,1,57,1,57,1,57,1,57,
  	1,57,1,57,1,57,5,57,655,8,57,10,57,12,57,658,9,57,1,57,1,57,1,58,1,58,
  	1,58,1,58,1,58,1,58,1,58,1,58,1,58,5,58,671,8,58,10,58,12,58,674,9,58,
  	1,58,1,58,1,59,1,59,1,59,1,59,1,59,3,59,683,8,59,1,60,1,60,1,60,1,61,
  	1,61,1,61,1,62,1,62,1,62,1,63,4,63,695,8,63,11,63,12,63,696,1,63,5,63,
  	700,8,63,10,63,12,63,703,9,63,1,64,4,64,706,8,64,11,64,12,64,707,1,64,
  	1,64,5,64,712,8,64,10,64,12,64,715,9,64,1,64,5,64,718,8,64,10,64,12,64,
  	721,9,64,1,64,1,64,4,64,725,8,64,11,64,12,64,726,3,64,729,8,64,1,64,5,
  	64,732,8,64,10,64,12,64,735,9,64,1,65,1,65,1,65,3,65,740,8,65,1,65,1,
  	65,5,65,744,8,65,10,65,12,65,747,9,65,1,66,1,66,1,66,5,66,752,8,66,10,
  	66,12,66,755,9,66,1,66,1,66,5,66,759,8,66,10,66,12,66,762,9,66,1,67,1,
  	67,3,67,766,8,67,1,67,1,67,1,67,5,67,771,8,67,10,67,12,67,774,9,67,1,
  	67,5,67,777,8,67,10,67,12,67,780,9,67,1,189,0,68,1,0,3,0,5,0,7,1,9,2,
  	11,3,13,4,15,5,17,6,19,7,21,8,23,9,25,10,27,11,29,12,31,13,33,14,35,15,
  	37,16,39,17,41,18,43,19,45,20,47,21,49,22,51,23,53,24,55,25,57,26,59,
  	27,61,28,63,29,65,30,67,31,69,32,71,33,73,34,75,35,77,36,79,37,81,38,
  	83,39,85,40,87,41,89,42,91,43,93,44,95,45,97,46,99,47,101,48,103,49,105,
  	50,107,51,109,52,111,53,113,54,115,55,117,56,119,57,121,58,123,59,125,
  	60,127,61,129,62,131,63,133,64,135,65,1,0,7,1,0,48,57,2,0,65,90,97,122,
  	3,0,9,10,13,13,32,32,2,0,10,10,13,13,3,0,34,34,39,39,92,92,2,0,39,39,
  	92,92,2,0,34,34,92,92,854,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,
  	0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,
  	0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,
  	35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,
  	0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,
  	0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,
  	67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,
  	0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,
  	0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,
  	99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,
  	109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,
  	119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,
  	129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,1,137,1,0,0,0,3,
  	139,1,0,0,0,5,141,1,0,0,0,7,144,1,0,0,0,9,151,1,0,0,0,11,157,1,0,0,0,
  	13,159,1,0,0,0,15,161,1,0,0,0,17,163,1,0,0,0,19,182,1,0,0,0,21,204,1,
  	0,0,0,23,213,1,0,0,0,25,222,1,0,0,0,27,231,1,0,0,0,29,240,1,0,0,0,31,
  	249,1,0,0,0,33,258,1,0,0,0,35,267,1,0,0,0,37,276,1,0,0,0,39,283,1,0,0,
  	0,41,290,1,0,0,0,43,297,1,0,0,0,45,304,1,0,0,0,47,311,1,0,0,0,49,318,
  	1,0,0,0,51,325,1,0,0,0,53,332,1,0,0,0,55,339,1,0,0,0,57,346,1,0,0,0,59,
  	353,1,0,0,0,61,360,1,0,0,0,63,367,1,0,0,0,65,374,1,0,0,0,67,381,1,0,0,
  	0,69,388,1,0,0,0,71,395,1,0,0,0,73,402,1,0,0,0,75,411,1,0,0,0,77,420,
  	1,0,0,0,79,429,1,0,0,0,81,438,1,0,0,0,83,449,1,0,0,0,85,460,1,0,0,0,87,
  	470,1,0,0,0,89,481,1,0,0,0,91,492,1,0,0,0,93,503,1,0,0,0,95,515,1,0,0,
  	0,97,526,1,0,0,0,99,540,1,0,0,0,101,555,1,0,0,0,103,567,1,0,0,0,105,581,
  	1,0,0,0,107,592,1,0,0,0,109,605,1,0,0,0,111,621,1,0,0,0,113,635,1,0,0,
  	0,115,647,1,0,0,0,117,661,1,0,0,0,119,677,1,0,0,0,121,684,1,0,0,0,123,
  	687,1,0,0,0,125,690,1,0,0,0,127,694,1,0,0,0,129,728,1,0,0,0,131,736,1,
  	0,0,0,133,748,1,0,0,0,135,765,1,0,0,0,137,138,7,0,0,0,138,2,1,0,0,0,139,
  	140,7,1,0,0,140,4,1,0,0,0,141,142,5,95,0,0,142,6,1,0,0,0,143,145,7,2,
  	0,0,144,143,1,0,0,0,145,146,1,0,0,0,146,144,1,0,0,0,146,147,1,0,0,0,147,
  	148,1,0,0,0,148,149,6,3,0,0,149,8,1,0,0,0,150,152,5,13,0,0,151,150,1,
  	0,0,0,151,152,1,0,0,0,152,153,1,0,0,0,153,154,5,10,0,0,154,155,1,0,0,
  	0,155,156,6,4,0,0,156,10,1,0,0,0,157,158,5,39,0,0,158,12,1,0,0,0,159,
  	160,5,34,0,0,160,14,1,0,0,0,161,162,5,92,0,0,162,16,1,0,0,0,163,167,5,
  	35,0,0,164,166,8,3,0,0,165,164,1,0,0,0,166,169,1,0,0,0,167,165,1,0,0,
  	0,167,168,1,0,0,0,168,172,1,0,0,0,169,167,1,0,0,0,170,173,3,9,4,0,171,
  	173,5,0,0,1,172,170,1,0,0,0,172,171,1,0,0,0,173,177,1,0,0,0,174,176,3,
  	7,3,0,175,174,1,0,0,0,176,179,1,0,0,0,177,175,1,0,0,0,177,178,1,0,0,0,
  	178,180,1,0,0,0,179,177,1,0,0,0,180,181,6,8,0,0,181,18,1,0,0,0,182,183,
  	5,96,0,0,183,184,5,96,0,0,184,185,5,96,0,0,185,189,1,0,0,0,186,188,9,
  	0,0,0,187,186,1,0,0,0,188,191,1,0,0,0,189,190,1,0,0,0,189,187,1,0,0,0,
  	190,192,1,0,0,0,191,189,1,0,0,0,192,193,5,96,0,0,193,194,5,96,0,0,194,
  	195,5,96,0,0,195,199,1,0,0,0,196,198,3,7,3,0,197,196,1,0,0,0,198,201,
  	1,0,0,0,199,197,1,0,0,0,199,200,1,0,0,0,200,202,1,0,0,0,201,199,1,0,0,
  	0,202,203,6,9,0,0,203,20,1,0,0,0,204,205,5,124,0,0,205,206,5,124,0,0,
  	206,210,1,0,0,0,207,209,3,7,3,0,208,207,1,0,0,0,209,212,1,0,0,0,210,208,
  	1,0,0,0,210,211,1,0,0,0,211,22,1,0,0,0,212,210,1,0,0,0,213,214,5,38,0,
  	0,214,215,5,38,0,0,215,219,1,0,0,0,216,218,3,7,3,0,217,216,1,0,0,0,218,
  	221,1,0,0,0,219,217,1,0,0,0,219,220,1,0,0,0,220,24,1,0,0,0,221,219,1,
  	0,0,0,222,223,5,61,0,0,223,224,5,61,0,0,224,228,1,0,0,0,225,227,3,7,3,
  	0,226,225,1,0,0,0,227,230,1,0,0,0,228,226,1,0,0,0,228,229,1,0,0,0,229,
  	26,1,0,0,0,230,228,1,0,0,0,231,232,5,33,0,0,232,233,5,61,0,0,233,237,
  	1,0,0,0,234,236,3,7,3,0,235,234,1,0,0,0,236,239,1,0,0,0,237,235,1,0,0,
  	0,237,238,1,0,0,0,238,28,1,0,0,0,239,237,1,0,0,0,240,241,5,60,0,0,241,
  	242,5,60,0,0,242,246,1,0,0,0,243,245,3,7,3,0,244,243,1,0,0,0,245,248,
  	1,0,0,0,246,244,1,0,0,0,246,247,1,0,0,0,247,30,1,0,0,0,248,246,1,0,0,
  	0,249,250,5,62,0,0,250,251,5,62,0,0,251,255,1,0,0,0,252,254,3,7,3,0,253,
  	252,1,0,0,0,254,257,1,0,0,0,255,253,1,0,0,0,255,256,1,0,0,0,256,32,1,
  	0,0,0,257,255,1,0,0,0,258,259,5,62,0,0,259,260,5,61,0,0,260,264,1,0,0,
  	0,261,263,3,7,3,0,262,261,1,0,0,0,263,266,1,0,0,0,264,262,1,0,0,0,264,
  	265,1,0,0,0,265,34,1,0,0,0,266,264,1,0,0,0,267,268,5,60,0,0,268,269,5,
  	61,0,0,269,273,1,0,0,0,270,272,3,7,3,0,271,270,1,0,0,0,272,275,1,0,0,
  	0,273,271,1,0,0,0,273,274,1,0,0,0,274,36,1,0,0,0,275,273,1,0,0,0,276,
  	280,5,62,0,0,277,279,3,7,3,0,278,277,1,0,0,0,279,282,1,0,0,0,280,278,
  	1,0,0,0,280,281,1,0,0,0,281,38,1,0,0,0,282,280,1,0,0,0,283,287,5,60,0,
  	0,284,286,3,7,3,0,285,284,1,0,0,0,286,289,1,0,0,0,287,285,1,0,0,0,287,
  	288,1,0,0,0,288,40,1,0,0,0,289,287,1,0,0,0,290,294,5,43,0,0,291,293,3,
  	7,3,0,292,291,1,0,0,0,293,296,1,0,0,0,294,292,1,0,0,0,294,295,1,0,0,0,
  	295,42,1,0,0,0,296,294,1,0,0,0,297,301,5,45,0,0,298,300,3,7,3,0,299,298,
  	1,0,0,0,300,303,1,0,0,0,301,299,1,0,0,0,301,302,1,0,0,0,302,44,1,0,0,
  	0,303,301,1,0,0,0,304,308,5,42,0,0,305,307,3,7,3,0,306,305,1,0,0,0,307,
  	310,1,0,0,0,308,306,1,0,0,0,308,309,1,0,0,0,309,46,1,0,0,0,310,308,1,
  	0,0,0,311,315,5,47,0,0,312,314,3,7,3,0,313,312,1,0,0,0,314,317,1,0,0,
  	0,315,313,1,0,0,0,315,316,1,0,0,0,316,48,1,0,0,0,317,315,1,0,0,0,318,
  	322,5,37,0,0,319,321,3,7,3,0,320,319,1,0,0,0,321,324,1,0,0,0,322,320,
  	1,0,0,0,322,323,1,0,0,0,323,50,1,0,0,0,324,322,1,0,0,0,325,329,5,33,0,
  	0,326,328,3,7,3,0,327,326,1,0,0,0,328,331,1,0,0,0,329,327,1,0,0,0,329,
  	330,1,0,0,0,330,52,1,0,0,0,331,329,1,0,0,0,332,336,5,124,0,0,333,335,
  	3,7,3,0,334,333,1,0,0,0,335,338,1,0,0,0,336,334,1,0,0,0,336,337,1,0,0,
  	0,337,54,1,0,0,0,338,336,1,0,0,0,339,343,5,38,0,0,340,342,3,7,3,0,341,
  	340,1,0,0,0,342,345,1,0,0,0,343,341,1,0,0,0,343,344,1,0,0,0,344,56,1,
  	0,0,0,345,343,1,0,0,0,346,350,5,126,0,0,347,349,3,7,3,0,348,347,1,0,0,
  	0,349,352,1,0,0,0,350,348,1,0,0,0,350,351,1,0,0,0,351,58,1,0,0,0,352,
  	350,1,0,0,0,353,357,5,94,0,0,354,356,3,7,3,0,355,354,1,0,0,0,356,359,
  	1,0,0,0,357,355,1,0,0,0,357,358,1,0,0,0,358,60,1,0,0,0,359,357,1,0,0,
  	0,360,364,5,46,0,0,361,363,3,7,3,0,362,361,1,0,0,0,363,366,1,0,0,0,364,
  	362,1,0,0,0,364,365,1,0,0,0,365,62,1,0,0,0,366,364,1,0,0,0,367,371,5,
  	61,0,0,368,370,3,7,3,0,369,368,1,0,0,0,370,373,1,0,0,0,371,369,1,0,0,
  	0,371,372,1,0,0,0,372,64,1,0,0,0,373,371,1,0,0,0,374,378,5,91,0,0,375,
  	377,3,7,3,0,376,375,1,0,0,0,377,380,1,0,0,0,378,376,1,0,0,0,378,379,1,
  	0,0,0,379,66,1,0,0,0,380,378,1,0,0,0,381,385,5,93,0,0,382,384,3,7,3,0,
  	383,382,1,0,0,0,384,387,1,0,0,0,385,383,1,0,0,0,385,386,1,0,0,0,386,68,
  	1,0,0,0,387,385,1,0,0,0,388,392,5,123,0,0,389,391,3,7,3,0,390,389,1,0,
  	0,0,391,394,1,0,0,0,392,390,1,0,0,0,392,393,1,0,0,0,393,70,1,0,0,0,394,
  	392,1,0,0,0,395,399,5,125,0,0,396,398,3,7,3,0,397,396,1,0,0,0,398,401,
  	1,0,0,0,399,397,1,0,0,0,399,400,1,0,0,0,400,72,1,0,0,0,401,399,1,0,0,
  	0,402,406,5,40,0,0,403,405,3,7,3,0,404,403,1,0,0,0,405,408,1,0,0,0,406,
  	404,1,0,0,0,406,407,1,0,0,0,407,409,1,0,0,0,408,406,1,0,0,0,409,410,6,
  	36,0,0,410,74,1,0,0,0,411,415,5,41,0,0,412,414,3,7,3,0,413,412,1,0,0,
  	0,414,417,1,0,0,0,415,413,1,0,0,0,415,416,1,0,0,0,416,418,1,0,0,0,417,
  	415,1,0,0,0,418,419,6,37,0,0,419,76,1,0,0,0,420,424,5,44,0,0,421,423,
  	3,7,3,0,422,421,1,0,0,0,423,426,1,0,0,0,424,422,1,0,0,0,424,425,1,0,0,
  	0,425,427,1,0,0,0,426,424,1,0,0,0,427,428,6,38,0,0,428,78,1,0,0,0,429,
  	433,5,59,0,0,430,432,3,7,3,0,431,430,1,0,0,0,432,435,1,0,0,0,433,431,
  	1,0,0,0,433,434,1,0,0,0,434,436,1,0,0,0,435,433,1,0,0,0,436,437,6,39,
  	0,0,437,80,1,0,0,0,438,439,5,98,0,0,439,440,5,111,0,0,440,441,5,111,0,
  	0,441,442,5,108,0,0,442,446,1,0,0,0,443,445,3,7,3,0,444,443,1,0,0,0,445,
  	448,1,0,0,0,446,444,1,0,0,0,446,447,1,0,0,0,447,82,1,0,0,0,448,446,1,
  	0,0,0,449,450,5,99,0,0,450,451,5,104,0,0,451,452,5,97,0,0,452,453,5,114,
  	0,0,453,457,1,0,0,0,454,456,3,7,3,0,455,454,1,0,0,0,456,459,1,0,0,0,457,
  	455,1,0,0,0,457,458,1,0,0,0,458,84,1,0,0,0,459,457,1,0,0,0,460,461,5,
  	105,0,0,461,462,5,110,0,0,462,463,5,116,0,0,463,467,1,0,0,0,464,466,3,
  	7,3,0,465,464,1,0,0,0,466,469,1,0,0,0,467,465,1,0,0,0,467,468,1,0,0,0,
  	468,86,1,0,0,0,469,467,1,0,0,0,470,471,5,108,0,0,471,472,5,111,0,0,472,
  	473,5,110,0,0,473,474,5,103,0,0,474,478,1,0,0,0,475,477,3,7,3,0,476,475,
  	1,0,0,0,477,480,1,0,0,0,478,476,1,0,0,0,478,479,1,0,0,0,479,88,1,0,0,
  	0,480,478,1,0,0,0,481,482,5,114,0,0,482,483,5,101,0,0,483,484,5,97,0,
  	0,484,485,5,108,0,0,485,489,1,0,0,0,486,488,3,7,3,0,487,486,1,0,0,0,488,
  	491,1,0,0,0,489,487,1,0,0,0,489,490,1,0,0,0,490,90,1,0,0,0,491,489,1,
  	0,0,0,492,493,5,116,0,0,493,494,5,114,0,0,494,495,5,117,0,0,495,496,5,
  	101,0,0,496,500,1,0,0,0,497,499,3,7,3,0,498,497,1,0,0,0,499,502,1,0,0,
  	0,500,498,1,0,0,0,500,501,1,0,0,0,501,92,1,0,0,0,502,500,1,0,0,0,503,
  	504,5,102,0,0,504,505,5,97,0,0,505,506,5,108,0,0,506,507,5,115,0,0,507,
  	508,5,101,0,0,508,512,1,0,0,0,509,511,3,7,3,0,510,509,1,0,0,0,511,514,
  	1,0,0,0,512,510,1,0,0,0,512,513,1,0,0,0,513,94,1,0,0,0,514,512,1,0,0,
  	0,515,516,5,118,0,0,516,517,5,111,0,0,517,518,5,105,0,0,518,519,5,100,
  	0,0,519,523,1,0,0,0,520,522,3,7,3,0,521,520,1,0,0,0,522,525,1,0,0,0,523,
  	521,1,0,0,0,523,524,1,0,0,0,524,96,1,0,0,0,525,523,1,0,0,0,526,527,5,
  	98,0,0,527,528,5,114,0,0,528,529,5,101,0,0,529,530,5,97,0,0,530,531,5,
  	107,0,0,531,535,1,0,0,0,532,534,3,7,3,0,533,532,1,0,0,0,534,537,1,0,0,
  	0,535,533,1,0,0,0,535,536,1,0,0,0,536,538,1,0,0,0,537,535,1,0,0,0,538,
  	539,6,48,0,0,539,98,1,0,0,0,540,541,5,114,0,0,541,542,5,101,0,0,542,543,
  	5,116,0,0,543,544,5,117,0,0,544,545,5,114,0,0,545,546,5,110,0,0,546,550,
  	1,0,0,0,547,549,3,7,3,0,548,547,1,0,0,0,549,552,1,0,0,0,550,548,1,0,0,
  	0,550,551,1,0,0,0,551,553,1,0,0,0,552,550,1,0,0,0,553,554,6,49,0,0,554,
  	100,1,0,0,0,555,556,5,101,0,0,556,557,5,110,0,0,557,558,5,100,0,0,558,
  	562,1,0,0,0,559,561,3,7,3,0,560,559,1,0,0,0,561,564,1,0,0,0,562,560,1,
  	0,0,0,562,563,1,0,0,0,563,565,1,0,0,0,564,562,1,0,0,0,565,566,6,50,0,
  	0,566,102,1,0,0,0,567,568,5,98,0,0,568,569,5,108,0,0,569,570,5,111,0,
  	0,570,571,5,99,0,0,571,572,5,107,0,0,572,576,1,0,0,0,573,575,3,7,3,0,
  	574,573,1,0,0,0,575,578,1,0,0,0,576,574,1,0,0,0,576,577,1,0,0,0,577,579,
  	1,0,0,0,578,576,1,0,0,0,579,580,6,51,0,0,580,104,1,0,0,0,581,582,5,105,
  	0,0,582,583,5,102,0,0,583,587,1,0,0,0,584,586,3,7,3,0,585,584,1,0,0,0,
  	586,589,1,0,0,0,587,585,1,0,0,0,587,588,1,0,0,0,588,590,1,0,0,0,589,587,
  	1,0,0,0,590,591,6,52,0,0,591,106,1,0,0,0,592,593,5,101,0,0,593,594,5,
  	108,0,0,594,595,5,115,0,0,595,596,5,101,0,0,596,600,1,0,0,0,597,599,3,
  	7,3,0,598,597,1,0,0,0,599,602,1,0,0,0,600,598,1,0,0,0,600,601,1,0,0,0,
  	601,603,1,0,0,0,602,600,1,0,0,0,603,604,6,53,0,0,604,108,1,0,0,0,605,
  	606,5,100,0,0,606,607,5,111,0,0,607,608,5,119,0,0,608,609,5,104,0,0,609,
  	610,5,105,0,0,610,611,5,108,0,0,611,612,5,101,0,0,612,616,1,0,0,0,613,
  	615,3,7,3,0,614,613,1,0,0,0,615,618,1,0,0,0,616,614,1,0,0,0,616,617,1,
  	0,0,0,617,619,1,0,0,0,618,616,1,0,0,0,619,620,6,54,0,0,620,110,1,0,0,
  	0,621,622,5,119,0,0,622,623,5,104,0,0,623,624,5,105,0,0,624,625,5,108,
  	0,0,625,626,5,101,0,0,626,630,1,0,0,0,627,629,3,7,3,0,628,627,1,0,0,0,
  	629,632,1,0,0,0,630,628,1,0,0,0,630,631,1,0,0,0,631,633,1,0,0,0,632,630,
  	1,0,0,0,633,634,6,55,0,0,634,112,1,0,0,0,635,636,5,102,0,0,636,637,5,
  	111,0,0,637,638,5,114,0,0,638,642,1,0,0,0,639,641,3,7,3,0,640,639,1,0,
  	0,0,641,644,1,0,0,0,642,640,1,0,0,0,642,643,1,0,0,0,643,645,1,0,0,0,644,
  	642,1,0,0,0,645,646,6,56,0,0,646,114,1,0,0,0,647,648,5,99,0,0,648,649,
  	5,108,0,0,649,650,5,97,0,0,650,651,5,115,0,0,651,652,5,115,0,0,652,656,
  	1,0,0,0,653,655,3,7,3,0,654,653,1,0,0,0,655,658,1,0,0,0,656,654,1,0,0,
  	0,656,657,1,0,0,0,657,659,1,0,0,0,658,656,1,0,0,0,659,660,6,57,0,0,660,
  	116,1,0,0,0,661,662,5,115,0,0,662,663,5,121,0,0,663,664,5,115,0,0,664,
  	665,5,99,0,0,665,666,5,97,0,0,666,667,5,108,0,0,667,668,5,108,0,0,668,
  	672,1,0,0,0,669,671,3,7,3,0,670,669,1,0,0,0,671,674,1,0,0,0,672,670,1,
  	0,0,0,672,673,1,0,0,0,673,675,1,0,0,0,674,672,1,0,0,0,675,676,6,58,0,
  	0,676,118,1,0,0,0,677,682,3,15,7,0,678,683,7,4,0,0,679,683,3,121,60,0,
  	680,683,3,123,61,0,681,683,3,125,62,0,682,678,1,0,0,0,682,679,1,0,0,0,
  	682,680,1,0,0,0,682,681,1,0,0,0,683,120,1,0,0,0,684,685,5,110,0,0,685,
  	686,6,60,1,0,686,122,1,0,0,0,687,688,5,116,0,0,688,689,6,61,2,0,689,124,
  	1,0,0,0,690,691,5,114,0,0,691,692,6,62,3,0,692,126,1,0,0,0,693,695,3,
  	1,0,0,694,693,1,0,0,0,695,696,1,0,0,0,696,694,1,0,0,0,696,697,1,0,0,0,
  	697,701,1,0,0,0,698,700,3,7,3,0,699,698,1,0,0,0,700,703,1,0,0,0,701,699,
  	1,0,0,0,701,702,1,0,0,0,702,128,1,0,0,0,703,701,1,0,0,0,704,706,3,1,0,
  	0,705,704,1,0,0,0,706,707,1,0,0,0,707,705,1,0,0,0,707,708,1,0,0,0,708,
  	709,1,0,0,0,709,713,5,46,0,0,710,712,3,1,0,0,711,710,1,0,0,0,712,715,
  	1,0,0,0,713,711,1,0,0,0,713,714,1,0,0,0,714,729,1,0,0,0,715,713,1,0,0,
  	0,716,718,3,1,0,0,717,716,1,0,0,0,718,721,1,0,0,0,719,717,1,0,0,0,719,
  	720,1,0,0,0,720,722,1,0,0,0,721,719,1,0,0,0,722,724,5,46,0,0,723,725,
  	3,1,0,0,724,723,1,0,0,0,725,726,1,0,0,0,726,724,1,0,0,0,726,727,1,0,0,
  	0,727,729,1,0,0,0,728,705,1,0,0,0,728,719,1,0,0,0,729,733,1,0,0,0,730,
  	732,3,7,3,0,731,730,1,0,0,0,732,735,1,0,0,0,733,731,1,0,0,0,733,734,1,
  	0,0,0,734,130,1,0,0,0,735,733,1,0,0,0,736,739,3,11,5,0,737,740,8,5,0,
  	0,738,740,3,119,59,0,739,737,1,0,0,0,739,738,1,0,0,0,740,741,1,0,0,0,
  	741,745,3,11,5,0,742,744,3,7,3,0,743,742,1,0,0,0,744,747,1,0,0,0,745,
  	743,1,0,0,0,745,746,1,0,0,0,746,132,1,0,0,0,747,745,1,0,0,0,748,753,3,
  	13,6,0,749,752,8,6,0,0,750,752,3,119,59,0,751,749,1,0,0,0,751,750,1,0,
  	0,0,752,755,1,0,0,0,753,751,1,0,0,0,753,754,1,0,0,0,754,756,1,0,0,0,755,
  	753,1,0,0,0,756,760,3,13,6,0,757,759,3,7,3,0,758,757,1,0,0,0,759,762,
  	1,0,0,0,760,758,1,0,0,0,760,761,1,0,0,0,761,134,1,0,0,0,762,760,1,0,0,
  	0,763,766,3,1,0,0,764,766,3,5,2,0,765,763,1,0,0,0,765,764,1,0,0,0,766,
  	772,1,0,0,0,767,771,3,1,0,0,768,771,3,3,1,0,769,771,3,5,2,0,770,767,1,
  	0,0,0,770,768,1,0,0,0,770,769,1,0,0,0,771,774,1,0,0,0,772,770,1,0,0,0,
  	772,773,1,0,0,0,773,778,1,0,0,0,774,772,1,0,0,0,775,777,3,7,3,0,776,775,
  	1,0,0,0,777,780,1,0,0,0,778,776,1,0,0,0,778,779,1,0,0,0,779,136,1,0,0,
  	0,780,778,1,0,0,0,75,0,146,151,167,172,177,189,199,210,219,228,237,246,
  	255,264,273,280,287,294,301,308,315,322,329,336,343,350,357,364,371,378,
  	385,392,399,406,415,424,433,446,457,467,478,489,500,512,523,535,550,562,
  	576,587,600,616,630,642,656,672,682,696,701,707,713,719,726,728,733,739,
  	745,751,753,760,765,770,772,778,4,6,0,0,1,60,0,1,61,1,1,62,2
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  bazlexerLexerStaticData = staticData.release();
}

}

BazLexer::BazLexer(CharStream *input) : Lexer(input) {
  BazLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *bazlexerLexerStaticData->atn, bazlexerLexerStaticData->decisionToDFA, bazlexerLexerStaticData->sharedContextCache);
}

BazLexer::~BazLexer() {
  delete _interpreter;
}

std::string BazLexer::getGrammarFileName() const {
  return "Baz.g4";
}

const std::vector<std::string>& BazLexer::getRuleNames() const {
  return bazlexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& BazLexer::getChannelNames() const {
  return bazlexerLexerStaticData->channelNames;
}

const std::vector<std::string>& BazLexer::getModeNames() const {
  return bazlexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& BazLexer::getVocabulary() const {
  return bazlexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView BazLexer::getSerializedATN() const {
  return bazlexerLexerStaticData->serializedATN;
}

const atn::ATN& BazLexer::getATN() const {
  return *bazlexerLexerStaticData->atn;
}


void BazLexer::action(RuleContext *context, size_t ruleIndex, size_t actionIndex) {
  switch (ruleIndex) {
    case 60: ESCLINEAction(antlrcpp::downCast<antlr4::RuleContext *>(context), actionIndex); break;
    case 61: ESCTABAction(antlrcpp::downCast<antlr4::RuleContext *>(context), actionIndex); break;
    case 62: ESCRETAction(antlrcpp::downCast<antlr4::RuleContext *>(context), actionIndex); break;

  default:
    break;
  }
}

void BazLexer::ESCLINEAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 0:  return '\n';  break;

  default:
    break;
  }
}

void BazLexer::ESCTABAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 1:  return '\t';  break;

  default:
    break;
  }
}

void BazLexer::ESCRETAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 2:  return '\r';  break;

  default:
    break;
  }
}



void BazLexer::initialize() {
  ::antlr4::internal::call_once(bazlexerLexerOnceFlag, bazlexerLexerInitialize);
}
