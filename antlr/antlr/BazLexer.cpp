
// Generated from antlr/Baz.g4 by ANTLR 4.12.0


#include "BazLexer.h"


using namespace antlr4;

using namespace parse;


using namespace antlr4;

namespace {

struct BazLexerStaticData final {
  BazLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  BazLexerStaticData(const BazLexerStaticData&) = delete;
  BazLexerStaticData(BazLexerStaticData&&) = delete;
  BazLexerStaticData& operator=(const BazLexerStaticData&) = delete;
  BazLexerStaticData& operator=(BazLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag bazlexerLexerOnceFlag;
BazLexerStaticData *bazlexerLexerStaticData = nullptr;

void bazlexerLexerInitialize() {
  assert(bazlexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<BazLexerStaticData>(
    std::vector<std::string>{
      "DIGIT", "LETTER", "UNDERSCORE", "STRINGLIT", "NAME", "REALLIT", "CHARLIT", 
      "INTLIT", "ESCSEQ", "ESCLINE", "ESCTAB", "ESCRET", "SCOMMENT", "MCOMMENT", 
      "OR", "AND", "EQUAL", "NOTEQUAL", "BITLSHIFT", "BITRSHIFT", "GREATEREQ", 
      "LESSEQ", "GREATER", "LESS", "ADD", "SUBTRACT", "MULTIPLY", "DIVIDE", 
      "MODULUS", "NOT", "BITOR", "BITAND", "BITNOT", "BITXOR", "ACCESS", 
      "ASSIGN", "OBRACK", "CBRACK", "OBRACE", "CBRACE", "OPAREN", "CPAREN", 
      "COMMA", "COLON", "EOS", "BOOL", "CHAR", "INT", "LONG", "REAL", "TRUE", 
      "FALSE", "VOID", "BREAK", "RETURN", "END", "BLOCK", "IF", "ELSE", 
      "DOWHILE", "WHILE", "FOR", "CLASS", "WS", "EOL", "SQUOTE", "DQUOTE", 
      "BSLASH"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "'n'", "'t'", "'r'", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "'''", "'\"'", 
      "'\\'"
    },
    std::vector<std::string>{
      "", "STRINGLIT", "NAME", "REALLIT", "CHARLIT", "INTLIT", "ESCSEQ", 
      "ESCLINE", "ESCTAB", "ESCRET", "SCOMMENT", "MCOMMENT", "OR", "AND", 
      "EQUAL", "NOTEQUAL", "BITLSHIFT", "BITRSHIFT", "GREATEREQ", "LESSEQ", 
      "GREATER", "LESS", "ADD", "SUBTRACT", "MULTIPLY", "DIVIDE", "MODULUS", 
      "NOT", "BITOR", "BITAND", "BITNOT", "BITXOR", "ACCESS", "ASSIGN", 
      "OBRACK", "CBRACK", "OBRACE", "CBRACE", "OPAREN", "CPAREN", "COMMA", 
      "COLON", "EOS", "BOOL", "CHAR", "INT", "LONG", "REAL", "TRUE", "FALSE", 
      "VOID", "BREAK", "RETURN", "END", "BLOCK", "IF", "ELSE", "DOWHILE", 
      "WHILE", "FOR", "CLASS", "WS", "EOL", "SQUOTE", "DQUOTE", "BSLASH"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,65,776,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,1,0,1,0,1,1,1,1,1,2,1,2,
  	1,3,1,3,1,3,5,3,147,8,3,10,3,12,3,150,9,3,1,3,1,3,5,3,154,8,3,10,3,12,
  	3,157,9,3,1,4,1,4,3,4,161,8,4,1,4,1,4,1,4,5,4,166,8,4,10,4,12,4,169,9,
  	4,1,4,5,4,172,8,4,10,4,12,4,175,9,4,1,4,1,4,1,5,4,5,180,8,5,11,5,12,5,
  	181,1,5,1,5,5,5,186,8,5,10,5,12,5,189,9,5,1,5,5,5,192,8,5,10,5,12,5,195,
  	9,5,1,5,1,5,4,5,199,8,5,11,5,12,5,200,3,5,203,8,5,1,5,5,5,206,8,5,10,
  	5,12,5,209,9,5,1,6,1,6,1,6,3,6,214,8,6,1,6,1,6,5,6,218,8,6,10,6,12,6,
  	221,9,6,1,7,4,7,224,8,7,11,7,12,7,225,1,7,5,7,229,8,7,10,7,12,7,232,9,
  	7,1,8,1,8,1,8,1,8,1,8,3,8,239,8,8,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,
  	1,11,1,12,1,12,5,12,252,8,12,10,12,12,12,255,9,12,1,12,1,12,3,12,259,
  	8,12,1,12,5,12,262,8,12,10,12,12,12,265,9,12,1,12,1,12,1,13,1,13,1,13,
  	1,13,1,13,5,13,274,8,13,10,13,12,13,277,9,13,1,13,1,13,1,13,1,13,1,13,
  	5,13,284,8,13,10,13,12,13,287,9,13,1,13,1,13,1,14,1,14,1,14,1,14,5,14,
  	295,8,14,10,14,12,14,298,9,14,1,15,1,15,1,15,1,15,5,15,304,8,15,10,15,
  	12,15,307,9,15,1,16,1,16,1,16,1,16,5,16,313,8,16,10,16,12,16,316,9,16,
  	1,17,1,17,1,17,1,17,5,17,322,8,17,10,17,12,17,325,9,17,1,18,1,18,1,18,
  	1,18,5,18,331,8,18,10,18,12,18,334,9,18,1,19,1,19,1,19,1,19,5,19,340,
  	8,19,10,19,12,19,343,9,19,1,20,1,20,1,20,1,20,5,20,349,8,20,10,20,12,
  	20,352,9,20,1,21,1,21,1,21,1,21,5,21,358,8,21,10,21,12,21,361,9,21,1,
  	22,1,22,5,22,365,8,22,10,22,12,22,368,9,22,1,23,1,23,5,23,372,8,23,10,
  	23,12,23,375,9,23,1,24,1,24,5,24,379,8,24,10,24,12,24,382,9,24,1,25,1,
  	25,5,25,386,8,25,10,25,12,25,389,9,25,1,26,1,26,5,26,393,8,26,10,26,12,
  	26,396,9,26,1,27,1,27,5,27,400,8,27,10,27,12,27,403,9,27,1,28,1,28,5,
  	28,407,8,28,10,28,12,28,410,9,28,1,29,1,29,5,29,414,8,29,10,29,12,29,
  	417,9,29,1,30,1,30,5,30,421,8,30,10,30,12,30,424,9,30,1,31,1,31,5,31,
  	428,8,31,10,31,12,31,431,9,31,1,32,1,32,5,32,435,8,32,10,32,12,32,438,
  	9,32,1,33,1,33,5,33,442,8,33,10,33,12,33,445,9,33,1,34,1,34,5,34,449,
  	8,34,10,34,12,34,452,9,34,1,35,1,35,5,35,456,8,35,10,35,12,35,459,9,35,
  	1,36,1,36,5,36,463,8,36,10,36,12,36,466,9,36,1,37,1,37,5,37,470,8,37,
  	10,37,12,37,473,9,37,1,38,1,38,5,38,477,8,38,10,38,12,38,480,9,38,1,39,
  	1,39,5,39,484,8,39,10,39,12,39,487,9,39,1,40,1,40,5,40,491,8,40,10,40,
  	12,40,494,9,40,1,40,1,40,1,41,1,41,5,41,500,8,41,10,41,12,41,503,9,41,
  	1,41,1,41,1,42,1,42,5,42,509,8,42,10,42,12,42,512,9,42,1,42,1,42,1,43,
  	1,43,5,43,518,8,43,10,43,12,43,521,9,43,1,43,1,43,1,44,1,44,5,44,527,
  	8,44,10,44,12,44,530,9,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,5,45,
  	540,8,45,10,45,12,45,543,9,45,1,46,1,46,1,46,1,46,1,46,1,46,5,46,551,
  	8,46,10,46,12,46,554,9,46,1,47,1,47,1,47,1,47,1,47,5,47,561,8,47,10,47,
  	12,47,564,9,47,1,48,1,48,1,48,1,48,1,48,1,48,5,48,572,8,48,10,48,12,48,
  	575,9,48,1,49,1,49,1,49,1,49,1,49,1,49,5,49,583,8,49,10,49,12,49,586,
  	9,49,1,50,1,50,1,50,1,50,1,50,1,50,5,50,594,8,50,10,50,12,50,597,9,50,
  	1,51,1,51,1,51,1,51,1,51,1,51,1,51,5,51,606,8,51,10,51,12,51,609,9,51,
  	1,52,1,52,1,52,1,52,1,52,1,52,5,52,617,8,52,10,52,12,52,620,9,52,1,53,
  	1,53,1,53,1,53,1,53,1,53,1,53,5,53,629,8,53,10,53,12,53,632,9,53,1,53,
  	1,53,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,5,54,644,8,54,10,54,12,54,
  	647,9,54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,5,55,656,8,55,10,55,12,55,
  	659,9,55,1,55,1,55,1,56,1,56,1,56,1,56,1,56,1,56,1,56,5,56,670,8,56,10,
  	56,12,56,673,9,56,1,56,1,56,1,57,1,57,1,57,1,57,5,57,681,8,57,10,57,12,
  	57,684,9,57,1,57,1,57,1,58,1,58,1,58,1,58,1,58,1,58,5,58,694,8,58,10,
  	58,12,58,697,9,58,1,58,1,58,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,
  	59,5,59,710,8,59,10,59,12,59,713,9,59,1,59,1,59,1,60,1,60,1,60,1,60,1,
  	60,1,60,1,60,5,60,724,8,60,10,60,12,60,727,9,60,1,60,1,60,1,61,1,61,1,
  	61,1,61,1,61,5,61,736,8,61,10,61,12,61,739,9,61,1,61,1,61,1,62,1,62,1,
  	62,1,62,1,62,1,62,1,62,5,62,750,8,62,10,62,12,62,753,9,62,1,62,1,62,1,
  	63,4,63,758,8,63,11,63,12,63,759,1,63,1,63,1,64,3,64,765,8,64,1,64,1,
  	64,1,64,1,64,1,65,1,65,1,66,1,66,1,67,1,67,1,275,0,68,1,0,3,0,5,0,7,1,
  	9,2,11,3,13,4,15,5,17,6,19,7,21,8,23,9,25,10,27,11,29,12,31,13,33,14,
  	35,15,37,16,39,17,41,18,43,19,45,20,47,21,49,22,51,23,53,24,55,25,57,
  	26,59,27,61,28,63,29,65,30,67,31,69,32,71,33,73,34,75,35,77,36,79,37,
  	81,38,83,39,85,40,87,41,89,42,91,43,93,44,95,45,97,46,99,47,101,48,103,
  	49,105,50,107,51,109,52,111,53,113,54,115,55,117,56,119,57,121,58,123,
  	59,125,60,127,61,129,62,131,63,133,64,135,65,1,0,7,1,0,48,57,2,0,65,90,
  	97,122,2,0,34,34,92,92,2,0,39,39,92,92,3,0,34,34,39,39,92,92,2,0,10,10,
  	13,13,3,0,9,10,13,13,32,32,849,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,
  	13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,
  	0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,
  	0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,
  	45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,
  	0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,
  	0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,
  	77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,
  	0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,
  	0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,
  	0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,
  	0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,
  	0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,1,137,1,0,0,
  	0,3,139,1,0,0,0,5,141,1,0,0,0,7,143,1,0,0,0,9,160,1,0,0,0,11,202,1,0,
  	0,0,13,210,1,0,0,0,15,223,1,0,0,0,17,233,1,0,0,0,19,240,1,0,0,0,21,243,
  	1,0,0,0,23,246,1,0,0,0,25,249,1,0,0,0,27,268,1,0,0,0,29,290,1,0,0,0,31,
  	299,1,0,0,0,33,308,1,0,0,0,35,317,1,0,0,0,37,326,1,0,0,0,39,335,1,0,0,
  	0,41,344,1,0,0,0,43,353,1,0,0,0,45,362,1,0,0,0,47,369,1,0,0,0,49,376,
  	1,0,0,0,51,383,1,0,0,0,53,390,1,0,0,0,55,397,1,0,0,0,57,404,1,0,0,0,59,
  	411,1,0,0,0,61,418,1,0,0,0,63,425,1,0,0,0,65,432,1,0,0,0,67,439,1,0,0,
  	0,69,446,1,0,0,0,71,453,1,0,0,0,73,460,1,0,0,0,75,467,1,0,0,0,77,474,
  	1,0,0,0,79,481,1,0,0,0,81,488,1,0,0,0,83,497,1,0,0,0,85,506,1,0,0,0,87,
  	515,1,0,0,0,89,524,1,0,0,0,91,533,1,0,0,0,93,544,1,0,0,0,95,555,1,0,0,
  	0,97,565,1,0,0,0,99,576,1,0,0,0,101,587,1,0,0,0,103,598,1,0,0,0,105,610,
  	1,0,0,0,107,621,1,0,0,0,109,635,1,0,0,0,111,650,1,0,0,0,113,662,1,0,0,
  	0,115,676,1,0,0,0,117,687,1,0,0,0,119,700,1,0,0,0,121,716,1,0,0,0,123,
  	730,1,0,0,0,125,742,1,0,0,0,127,757,1,0,0,0,129,764,1,0,0,0,131,770,1,
  	0,0,0,133,772,1,0,0,0,135,774,1,0,0,0,137,138,7,0,0,0,138,2,1,0,0,0,139,
  	140,7,1,0,0,140,4,1,0,0,0,141,142,5,95,0,0,142,6,1,0,0,0,143,148,3,133,
  	66,0,144,147,8,2,0,0,145,147,3,17,8,0,146,144,1,0,0,0,146,145,1,0,0,0,
  	147,150,1,0,0,0,148,146,1,0,0,0,148,149,1,0,0,0,149,151,1,0,0,0,150,148,
  	1,0,0,0,151,155,3,133,66,0,152,154,3,127,63,0,153,152,1,0,0,0,154,157,
  	1,0,0,0,155,153,1,0,0,0,155,156,1,0,0,0,156,8,1,0,0,0,157,155,1,0,0,0,
  	158,161,3,3,1,0,159,161,3,5,2,0,160,158,1,0,0,0,160,159,1,0,0,0,161,167,
  	1,0,0,0,162,166,3,1,0,0,163,166,3,3,1,0,164,166,3,5,2,0,165,162,1,0,0,
  	0,165,163,1,0,0,0,165,164,1,0,0,0,166,169,1,0,0,0,167,165,1,0,0,0,167,
  	168,1,0,0,0,168,173,1,0,0,0,169,167,1,0,0,0,170,172,3,127,63,0,171,170,
  	1,0,0,0,172,175,1,0,0,0,173,171,1,0,0,0,173,174,1,0,0,0,174,176,1,0,0,
  	0,175,173,1,0,0,0,176,177,6,4,0,0,177,10,1,0,0,0,178,180,3,1,0,0,179,
  	178,1,0,0,0,180,181,1,0,0,0,181,179,1,0,0,0,181,182,1,0,0,0,182,183,1,
  	0,0,0,183,187,5,46,0,0,184,186,3,1,0,0,185,184,1,0,0,0,186,189,1,0,0,
  	0,187,185,1,0,0,0,187,188,1,0,0,0,188,203,1,0,0,0,189,187,1,0,0,0,190,
  	192,3,1,0,0,191,190,1,0,0,0,192,195,1,0,0,0,193,191,1,0,0,0,193,194,1,
  	0,0,0,194,196,1,0,0,0,195,193,1,0,0,0,196,198,5,46,0,0,197,199,3,1,0,
  	0,198,197,1,0,0,0,199,200,1,0,0,0,200,198,1,0,0,0,200,201,1,0,0,0,201,
  	203,1,0,0,0,202,179,1,0,0,0,202,193,1,0,0,0,203,207,1,0,0,0,204,206,3,
  	127,63,0,205,204,1,0,0,0,206,209,1,0,0,0,207,205,1,0,0,0,207,208,1,0,
  	0,0,208,12,1,0,0,0,209,207,1,0,0,0,210,213,3,131,65,0,211,214,8,3,0,0,
  	212,214,3,17,8,0,213,211,1,0,0,0,213,212,1,0,0,0,214,215,1,0,0,0,215,
  	219,3,131,65,0,216,218,3,127,63,0,217,216,1,0,0,0,218,221,1,0,0,0,219,
  	217,1,0,0,0,219,220,1,0,0,0,220,14,1,0,0,0,221,219,1,0,0,0,222,224,3,
  	1,0,0,223,222,1,0,0,0,224,225,1,0,0,0,225,223,1,0,0,0,225,226,1,0,0,0,
  	226,230,1,0,0,0,227,229,3,127,63,0,228,227,1,0,0,0,229,232,1,0,0,0,230,
  	228,1,0,0,0,230,231,1,0,0,0,231,16,1,0,0,0,232,230,1,0,0,0,233,238,3,
  	135,67,0,234,239,7,4,0,0,235,239,3,19,9,0,236,239,3,21,10,0,237,239,3,
  	23,11,0,238,234,1,0,0,0,238,235,1,0,0,0,238,236,1,0,0,0,238,237,1,0,0,
  	0,239,18,1,0,0,0,240,241,5,110,0,0,241,242,6,9,1,0,242,20,1,0,0,0,243,
  	244,5,116,0,0,244,245,6,10,2,0,245,22,1,0,0,0,246,247,5,114,0,0,247,248,
  	6,11,3,0,248,24,1,0,0,0,249,253,5,35,0,0,250,252,8,5,0,0,251,250,1,0,
  	0,0,252,255,1,0,0,0,253,251,1,0,0,0,253,254,1,0,0,0,254,258,1,0,0,0,255,
  	253,1,0,0,0,256,259,3,129,64,0,257,259,5,0,0,1,258,256,1,0,0,0,258,257,
  	1,0,0,0,259,263,1,0,0,0,260,262,3,127,63,0,261,260,1,0,0,0,262,265,1,
  	0,0,0,263,261,1,0,0,0,263,264,1,0,0,0,264,266,1,0,0,0,265,263,1,0,0,0,
  	266,267,6,12,4,0,267,26,1,0,0,0,268,269,5,96,0,0,269,270,5,96,0,0,270,
  	271,5,96,0,0,271,275,1,0,0,0,272,274,9,0,0,0,273,272,1,0,0,0,274,277,
  	1,0,0,0,275,276,1,0,0,0,275,273,1,0,0,0,276,278,1,0,0,0,277,275,1,0,0,
  	0,278,279,5,96,0,0,279,280,5,96,0,0,280,281,5,96,0,0,281,285,1,0,0,0,
  	282,284,3,127,63,0,283,282,1,0,0,0,284,287,1,0,0,0,285,283,1,0,0,0,285,
  	286,1,0,0,0,286,288,1,0,0,0,287,285,1,0,0,0,288,289,6,13,4,0,289,28,1,
  	0,0,0,290,291,5,124,0,0,291,292,5,124,0,0,292,296,1,0,0,0,293,295,3,127,
  	63,0,294,293,1,0,0,0,295,298,1,0,0,0,296,294,1,0,0,0,296,297,1,0,0,0,
  	297,30,1,0,0,0,298,296,1,0,0,0,299,300,5,38,0,0,300,301,5,38,0,0,301,
  	305,1,0,0,0,302,304,3,127,63,0,303,302,1,0,0,0,304,307,1,0,0,0,305,303,
  	1,0,0,0,305,306,1,0,0,0,306,32,1,0,0,0,307,305,1,0,0,0,308,309,5,61,0,
  	0,309,310,5,61,0,0,310,314,1,0,0,0,311,313,3,127,63,0,312,311,1,0,0,0,
  	313,316,1,0,0,0,314,312,1,0,0,0,314,315,1,0,0,0,315,34,1,0,0,0,316,314,
  	1,0,0,0,317,318,5,33,0,0,318,319,5,61,0,0,319,323,1,0,0,0,320,322,3,127,
  	63,0,321,320,1,0,0,0,322,325,1,0,0,0,323,321,1,0,0,0,323,324,1,0,0,0,
  	324,36,1,0,0,0,325,323,1,0,0,0,326,327,5,60,0,0,327,328,5,60,0,0,328,
  	332,1,0,0,0,329,331,3,127,63,0,330,329,1,0,0,0,331,334,1,0,0,0,332,330,
  	1,0,0,0,332,333,1,0,0,0,333,38,1,0,0,0,334,332,1,0,0,0,335,336,5,62,0,
  	0,336,337,5,62,0,0,337,341,1,0,0,0,338,340,3,127,63,0,339,338,1,0,0,0,
  	340,343,1,0,0,0,341,339,1,0,0,0,341,342,1,0,0,0,342,40,1,0,0,0,343,341,
  	1,0,0,0,344,345,5,62,0,0,345,346,5,61,0,0,346,350,1,0,0,0,347,349,3,127,
  	63,0,348,347,1,0,0,0,349,352,1,0,0,0,350,348,1,0,0,0,350,351,1,0,0,0,
  	351,42,1,0,0,0,352,350,1,0,0,0,353,354,5,60,0,0,354,355,5,61,0,0,355,
  	359,1,0,0,0,356,358,3,127,63,0,357,356,1,0,0,0,358,361,1,0,0,0,359,357,
  	1,0,0,0,359,360,1,0,0,0,360,44,1,0,0,0,361,359,1,0,0,0,362,366,5,62,0,
  	0,363,365,3,127,63,0,364,363,1,0,0,0,365,368,1,0,0,0,366,364,1,0,0,0,
  	366,367,1,0,0,0,367,46,1,0,0,0,368,366,1,0,0,0,369,373,5,60,0,0,370,372,
  	3,127,63,0,371,370,1,0,0,0,372,375,1,0,0,0,373,371,1,0,0,0,373,374,1,
  	0,0,0,374,48,1,0,0,0,375,373,1,0,0,0,376,380,5,43,0,0,377,379,3,127,63,
  	0,378,377,1,0,0,0,379,382,1,0,0,0,380,378,1,0,0,0,380,381,1,0,0,0,381,
  	50,1,0,0,0,382,380,1,0,0,0,383,387,5,45,0,0,384,386,3,127,63,0,385,384,
  	1,0,0,0,386,389,1,0,0,0,387,385,1,0,0,0,387,388,1,0,0,0,388,52,1,0,0,
  	0,389,387,1,0,0,0,390,394,5,42,0,0,391,393,3,127,63,0,392,391,1,0,0,0,
  	393,396,1,0,0,0,394,392,1,0,0,0,394,395,1,0,0,0,395,54,1,0,0,0,396,394,
  	1,0,0,0,397,401,5,47,0,0,398,400,3,127,63,0,399,398,1,0,0,0,400,403,1,
  	0,0,0,401,399,1,0,0,0,401,402,1,0,0,0,402,56,1,0,0,0,403,401,1,0,0,0,
  	404,408,5,37,0,0,405,407,3,127,63,0,406,405,1,0,0,0,407,410,1,0,0,0,408,
  	406,1,0,0,0,408,409,1,0,0,0,409,58,1,0,0,0,410,408,1,0,0,0,411,415,5,
  	33,0,0,412,414,3,127,63,0,413,412,1,0,0,0,414,417,1,0,0,0,415,413,1,0,
  	0,0,415,416,1,0,0,0,416,60,1,0,0,0,417,415,1,0,0,0,418,422,5,124,0,0,
  	419,421,3,127,63,0,420,419,1,0,0,0,421,424,1,0,0,0,422,420,1,0,0,0,422,
  	423,1,0,0,0,423,62,1,0,0,0,424,422,1,0,0,0,425,429,5,38,0,0,426,428,3,
  	127,63,0,427,426,1,0,0,0,428,431,1,0,0,0,429,427,1,0,0,0,429,430,1,0,
  	0,0,430,64,1,0,0,0,431,429,1,0,0,0,432,436,5,126,0,0,433,435,3,127,63,
  	0,434,433,1,0,0,0,435,438,1,0,0,0,436,434,1,0,0,0,436,437,1,0,0,0,437,
  	66,1,0,0,0,438,436,1,0,0,0,439,443,5,94,0,0,440,442,3,127,63,0,441,440,
  	1,0,0,0,442,445,1,0,0,0,443,441,1,0,0,0,443,444,1,0,0,0,444,68,1,0,0,
  	0,445,443,1,0,0,0,446,450,5,46,0,0,447,449,3,127,63,0,448,447,1,0,0,0,
  	449,452,1,0,0,0,450,448,1,0,0,0,450,451,1,0,0,0,451,70,1,0,0,0,452,450,
  	1,0,0,0,453,457,5,61,0,0,454,456,3,127,63,0,455,454,1,0,0,0,456,459,1,
  	0,0,0,457,455,1,0,0,0,457,458,1,0,0,0,458,72,1,0,0,0,459,457,1,0,0,0,
  	460,464,5,91,0,0,461,463,3,127,63,0,462,461,1,0,0,0,463,466,1,0,0,0,464,
  	462,1,0,0,0,464,465,1,0,0,0,465,74,1,0,0,0,466,464,1,0,0,0,467,471,5,
  	93,0,0,468,470,3,127,63,0,469,468,1,0,0,0,470,473,1,0,0,0,471,469,1,0,
  	0,0,471,472,1,0,0,0,472,76,1,0,0,0,473,471,1,0,0,0,474,478,5,123,0,0,
  	475,477,3,127,63,0,476,475,1,0,0,0,477,480,1,0,0,0,478,476,1,0,0,0,478,
  	479,1,0,0,0,479,78,1,0,0,0,480,478,1,0,0,0,481,485,5,125,0,0,482,484,
  	3,127,63,0,483,482,1,0,0,0,484,487,1,0,0,0,485,483,1,0,0,0,485,486,1,
  	0,0,0,486,80,1,0,0,0,487,485,1,0,0,0,488,492,5,40,0,0,489,491,3,127,63,
  	0,490,489,1,0,0,0,491,494,1,0,0,0,492,490,1,0,0,0,492,493,1,0,0,0,493,
  	495,1,0,0,0,494,492,1,0,0,0,495,496,6,40,4,0,496,82,1,0,0,0,497,501,5,
  	41,0,0,498,500,3,127,63,0,499,498,1,0,0,0,500,503,1,0,0,0,501,499,1,0,
  	0,0,501,502,1,0,0,0,502,504,1,0,0,0,503,501,1,0,0,0,504,505,6,41,4,0,
  	505,84,1,0,0,0,506,510,5,44,0,0,507,509,3,127,63,0,508,507,1,0,0,0,509,
  	512,1,0,0,0,510,508,1,0,0,0,510,511,1,0,0,0,511,513,1,0,0,0,512,510,1,
  	0,0,0,513,514,6,42,4,0,514,86,1,0,0,0,515,519,5,58,0,0,516,518,3,127,
  	63,0,517,516,1,0,0,0,518,521,1,0,0,0,519,517,1,0,0,0,519,520,1,0,0,0,
  	520,522,1,0,0,0,521,519,1,0,0,0,522,523,6,43,4,0,523,88,1,0,0,0,524,528,
  	5,59,0,0,525,527,3,127,63,0,526,525,1,0,0,0,527,530,1,0,0,0,528,526,1,
  	0,0,0,528,529,1,0,0,0,529,531,1,0,0,0,530,528,1,0,0,0,531,532,6,44,4,
  	0,532,90,1,0,0,0,533,534,5,98,0,0,534,535,5,111,0,0,535,536,5,111,0,0,
  	536,537,5,108,0,0,537,541,1,0,0,0,538,540,3,127,63,0,539,538,1,0,0,0,
  	540,543,1,0,0,0,541,539,1,0,0,0,541,542,1,0,0,0,542,92,1,0,0,0,543,541,
  	1,0,0,0,544,545,5,99,0,0,545,546,5,104,0,0,546,547,5,97,0,0,547,548,5,
  	114,0,0,548,552,1,0,0,0,549,551,3,127,63,0,550,549,1,0,0,0,551,554,1,
  	0,0,0,552,550,1,0,0,0,552,553,1,0,0,0,553,94,1,0,0,0,554,552,1,0,0,0,
  	555,556,5,105,0,0,556,557,5,110,0,0,557,558,5,116,0,0,558,562,1,0,0,0,
  	559,561,3,127,63,0,560,559,1,0,0,0,561,564,1,0,0,0,562,560,1,0,0,0,562,
  	563,1,0,0,0,563,96,1,0,0,0,564,562,1,0,0,0,565,566,5,108,0,0,566,567,
  	5,111,0,0,567,568,5,110,0,0,568,569,5,103,0,0,569,573,1,0,0,0,570,572,
  	3,127,63,0,571,570,1,0,0,0,572,575,1,0,0,0,573,571,1,0,0,0,573,574,1,
  	0,0,0,574,98,1,0,0,0,575,573,1,0,0,0,576,577,5,114,0,0,577,578,5,101,
  	0,0,578,579,5,97,0,0,579,580,5,108,0,0,580,584,1,0,0,0,581,583,3,127,
  	63,0,582,581,1,0,0,0,583,586,1,0,0,0,584,582,1,0,0,0,584,585,1,0,0,0,
  	585,100,1,0,0,0,586,584,1,0,0,0,587,588,5,116,0,0,588,589,5,114,0,0,589,
  	590,5,117,0,0,590,591,5,101,0,0,591,595,1,0,0,0,592,594,3,127,63,0,593,
  	592,1,0,0,0,594,597,1,0,0,0,595,593,1,0,0,0,595,596,1,0,0,0,596,102,1,
  	0,0,0,597,595,1,0,0,0,598,599,5,102,0,0,599,600,5,97,0,0,600,601,5,108,
  	0,0,601,602,5,115,0,0,602,603,5,101,0,0,603,607,1,0,0,0,604,606,3,127,
  	63,0,605,604,1,0,0,0,606,609,1,0,0,0,607,605,1,0,0,0,607,608,1,0,0,0,
  	608,104,1,0,0,0,609,607,1,0,0,0,610,611,5,118,0,0,611,612,5,111,0,0,612,
  	613,5,105,0,0,613,614,5,100,0,0,614,618,1,0,0,0,615,617,3,127,63,0,616,
  	615,1,0,0,0,617,620,1,0,0,0,618,616,1,0,0,0,618,619,1,0,0,0,619,106,1,
  	0,0,0,620,618,1,0,0,0,621,622,5,98,0,0,622,623,5,114,0,0,623,624,5,101,
  	0,0,624,625,5,97,0,0,625,626,5,107,0,0,626,630,1,0,0,0,627,629,3,127,
  	63,0,628,627,1,0,0,0,629,632,1,0,0,0,630,628,1,0,0,0,630,631,1,0,0,0,
  	631,633,1,0,0,0,632,630,1,0,0,0,633,634,6,53,4,0,634,108,1,0,0,0,635,
  	636,5,114,0,0,636,637,5,101,0,0,637,638,5,116,0,0,638,639,5,117,0,0,639,
  	640,5,114,0,0,640,641,5,110,0,0,641,645,1,0,0,0,642,644,3,127,63,0,643,
  	642,1,0,0,0,644,647,1,0,0,0,645,643,1,0,0,0,645,646,1,0,0,0,646,648,1,
  	0,0,0,647,645,1,0,0,0,648,649,6,54,4,0,649,110,1,0,0,0,650,651,5,101,
  	0,0,651,652,5,110,0,0,652,653,5,100,0,0,653,657,1,0,0,0,654,656,3,127,
  	63,0,655,654,1,0,0,0,656,659,1,0,0,0,657,655,1,0,0,0,657,658,1,0,0,0,
  	658,660,1,0,0,0,659,657,1,0,0,0,660,661,6,55,4,0,661,112,1,0,0,0,662,
  	663,5,98,0,0,663,664,5,108,0,0,664,665,5,111,0,0,665,666,5,99,0,0,666,
  	667,5,107,0,0,667,671,1,0,0,0,668,670,3,127,63,0,669,668,1,0,0,0,670,
  	673,1,0,0,0,671,669,1,0,0,0,671,672,1,0,0,0,672,674,1,0,0,0,673,671,1,
  	0,0,0,674,675,6,56,4,0,675,114,1,0,0,0,676,677,5,105,0,0,677,678,5,102,
  	0,0,678,682,1,0,0,0,679,681,3,127,63,0,680,679,1,0,0,0,681,684,1,0,0,
  	0,682,680,1,0,0,0,682,683,1,0,0,0,683,685,1,0,0,0,684,682,1,0,0,0,685,
  	686,6,57,4,0,686,116,1,0,0,0,687,688,5,101,0,0,688,689,5,108,0,0,689,
  	690,5,115,0,0,690,691,5,101,0,0,691,695,1,0,0,0,692,694,3,127,63,0,693,
  	692,1,0,0,0,694,697,1,0,0,0,695,693,1,0,0,0,695,696,1,0,0,0,696,698,1,
  	0,0,0,697,695,1,0,0,0,698,699,6,58,4,0,699,118,1,0,0,0,700,701,5,100,
  	0,0,701,702,5,111,0,0,702,703,5,119,0,0,703,704,5,104,0,0,704,705,5,105,
  	0,0,705,706,5,108,0,0,706,707,5,101,0,0,707,711,1,0,0,0,708,710,3,127,
  	63,0,709,708,1,0,0,0,710,713,1,0,0,0,711,709,1,0,0,0,711,712,1,0,0,0,
  	712,714,1,0,0,0,713,711,1,0,0,0,714,715,6,59,4,0,715,120,1,0,0,0,716,
  	717,5,119,0,0,717,718,5,104,0,0,718,719,5,105,0,0,719,720,5,108,0,0,720,
  	721,5,101,0,0,721,725,1,0,0,0,722,724,3,127,63,0,723,722,1,0,0,0,724,
  	727,1,0,0,0,725,723,1,0,0,0,725,726,1,0,0,0,726,728,1,0,0,0,727,725,1,
  	0,0,0,728,729,6,60,4,0,729,122,1,0,0,0,730,731,5,102,0,0,731,732,5,111,
  	0,0,732,733,5,114,0,0,733,737,1,0,0,0,734,736,3,127,63,0,735,734,1,0,
  	0,0,736,739,1,0,0,0,737,735,1,0,0,0,737,738,1,0,0,0,738,740,1,0,0,0,739,
  	737,1,0,0,0,740,741,6,61,4,0,741,124,1,0,0,0,742,743,5,99,0,0,743,744,
  	5,108,0,0,744,745,5,97,0,0,745,746,5,115,0,0,746,747,5,115,0,0,747,751,
  	1,0,0,0,748,750,3,127,63,0,749,748,1,0,0,0,750,753,1,0,0,0,751,749,1,
  	0,0,0,751,752,1,0,0,0,752,754,1,0,0,0,753,751,1,0,0,0,754,755,6,62,4,
  	0,755,126,1,0,0,0,756,758,7,6,0,0,757,756,1,0,0,0,758,759,1,0,0,0,759,
  	757,1,0,0,0,759,760,1,0,0,0,760,761,1,0,0,0,761,762,6,63,4,0,762,128,
  	1,0,0,0,763,765,5,13,0,0,764,763,1,0,0,0,764,765,1,0,0,0,765,766,1,0,
  	0,0,766,767,5,10,0,0,767,768,1,0,0,0,768,769,6,64,4,0,769,130,1,0,0,0,
  	770,771,5,39,0,0,771,132,1,0,0,0,772,773,5,34,0,0,773,134,1,0,0,0,774,
  	775,5,92,0,0,775,136,1,0,0,0,75,0,146,148,155,160,165,167,173,181,187,
  	193,200,202,207,213,219,225,230,238,253,258,263,275,285,296,305,314,323,
  	332,341,350,359,366,373,380,387,394,401,408,415,422,429,436,443,450,457,
  	464,471,478,485,492,501,510,519,528,541,552,562,573,584,595,607,618,630,
  	645,657,671,682,695,711,725,737,751,759,764,5,1,4,0,1,9,1,1,10,2,1,11,
  	3,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  bazlexerLexerStaticData = staticData.release();
}

}

BazLexer::BazLexer(CharStream *input) : Lexer(input) {
  BazLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *bazlexerLexerStaticData->atn, bazlexerLexerStaticData->decisionToDFA, bazlexerLexerStaticData->sharedContextCache);
}

BazLexer::~BazLexer() {
  delete _interpreter;
}

std::string BazLexer::getGrammarFileName() const {
  return "Baz.g4";
}

const std::vector<std::string>& BazLexer::getRuleNames() const {
  return bazlexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& BazLexer::getChannelNames() const {
  return bazlexerLexerStaticData->channelNames;
}

const std::vector<std::string>& BazLexer::getModeNames() const {
  return bazlexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& BazLexer::getVocabulary() const {
  return bazlexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView BazLexer::getSerializedATN() const {
  return bazlexerLexerStaticData->serializedATN;
}

const atn::ATN& BazLexer::getATN() const {
  return *bazlexerLexerStaticData->atn;
}


void BazLexer::action(RuleContext *context, size_t ruleIndex, size_t actionIndex) {
  switch (ruleIndex) {
    case 4: NAMEAction(antlrcpp::downCast<antlr4::RuleContext *>(context), actionIndex); break;
    case 9: ESCLINEAction(antlrcpp::downCast<antlr4::RuleContext *>(context), actionIndex); break;
    case 10: ESCTABAction(antlrcpp::downCast<antlr4::RuleContext *>(context), actionIndex); break;
    case 11: ESCRETAction(antlrcpp::downCast<antlr4::RuleContext *>(context), actionIndex); break;

  default:
    break;
  }
}

void BazLexer::NAMEAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 0:  if(isKeyword(getText())) skip();  break;

  default:
    break;
  }
}

void BazLexer::ESCLINEAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 1:  setText("\n");  break;

  default:
    break;
  }
}

void BazLexer::ESCTABAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 2:  setText("\t");  break;

  default:
    break;
  }
}

void BazLexer::ESCRETAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 3:  setText("\r");  break;

  default:
    break;
  }
}



void BazLexer::initialize() {
  ::antlr4::internal::call_once(bazlexerLexerOnceFlag, bazlexerLexerInitialize);
}
