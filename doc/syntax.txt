THIS IS OUT OF DATE
SEE BAZ.TXT

Naming Constraints
Must fit pattern
{a..z A..Z _} {a..z A..Z 0..9 _}*
Disallowed Names
int, float, char, end, if, else, while, dowhile, void, null, return, new, class, print

Types
int - integer
float - floating point number
char - character
<type>[] - array
<type>$ - pointer

Comments
# comment
<stmt> # comment
``` comment block ```

Built-in Functions
print(), length()

Command Line Arguments
args[]

-------------------- Expressions --------------------

Primitive Expressions
Integer
{0..9}+
Real
{0..9}+ . {0..9}+
Character
'{a..z A..Z}'
String
"{a..z A..Z}*"
Null
null
Variables
<var>

Operators
Level 1
Logical OR
<exp> || <exp>

Level 2
Logical And
<exp> && <exp>

Level 3
Equals/Not Equals
<exp> == <exp>
<exp> != <exp>

Level 4
Less Than/Greater Than
<exp> < <exp>
<exp> > <exp>
Less Or Equal/Greater Or Equal
<exp> <= <exp>
<exp> >= <exp>

Level 5
Addition/Subtraction
<exp> + <exp>
<exp - <exp>

Level 6
Multiplication/Division/Modulus
<exp> * <exp>
<exp> / <exp>
<exp> % <exp>

Level 7
Unary Plus/Minus
+ <exp>
- <exp>
Logical Not
! <exp>
Pointer Reference/Dereference
$ <exp>
@ <exp>

Level 8
Parentheses
( <exp> )
Function Call
<func> ( <exp> )
Array Access
<var> [ <exp> ]
New Class
new <obj>(<exp>, ... )
Member Access
<obj> . <var>
Primitives

-------------------- Statements --------------------

Declaration/Assignment
<type> <var>;
<var> = <exp>;
<type> <var> = <exp>;

Function Definition
<type> <func>(<type> <var>, ... );
    <stmts>
    return <exp>;
end;

Void Function
void <func>(<type> <var>, ... );
    <stmts>
    return;
end;

Function Call
<call exp>;

If Statement
if(<exp>);
    <stmts>
end;

If Else Statement
if(<exp>);
    <stmts>
else;
    <stmts>
end;

While Loop
while(<exp>);
    <stmts>
end;

Do While Loop
dowhile(<exp>);
    <stmts>
end;

For Loop
for(<type> <var> = <num> .. <num>);
    <stmts>
end;

Class Definition
class <obj>;
    <type> init(<type> <var>, ...);
        <stmts>
    end;
    <decls>
end;