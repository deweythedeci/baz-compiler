
// Generated from antlr/Baz.g4 by ANTLR 4.12.0


#include "parse/BazLexer.h"


using namespace antlr4;

using namespace parse;


using namespace antlr4;

namespace {

struct BazLexerStaticData final {
  BazLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  BazLexerStaticData(const BazLexerStaticData&) = delete;
  BazLexerStaticData(BazLexerStaticData&&) = delete;
  BazLexerStaticData& operator=(const BazLexerStaticData&) = delete;
  BazLexerStaticData& operator=(BazLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag bazlexerLexerOnceFlag;
BazLexerStaticData *bazlexerLexerStaticData = nullptr;

void bazlexerLexerInitialize() {
  assert(bazlexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<BazLexerStaticData>(
    std::vector<std::string>{
      "INTLIT", "REALLIT", "CHARLIT", "STRINGLIT", "NAME", "DIGIT", "LETTER", 
      "UNDERSCORE", "WS", "EOL", "SQUOTE", "DQUOTE", "BSLASH", "SCOMMENT", 
      "MCOMMENT", "OR", "AND", "EQUAL", "NOTEQUAL", "BITLSHIFT", "BITRSHIFT", 
      "GREATEREQ", "LESSEQ", "GREATER", "LESS", "ADD", "SUBTRACT", "MULTIPLY", 
      "DIVIDE", "MODULUS", "NOT", "BITOR", "BITAND", "BITNOT", "BITXOR", 
      "ACCESS", "ASSIGN", "OBRACK", "CBRACK", "OBRACE", "CBRACE", "OPAREN", 
      "CPAREN", "COMMA", "COLON", "EOS", "BOOL", "CHAR", "INT", "LONG", 
      "REAL", "TRUE", "FALSE", "VOID", "BREAK", "RETURN", "END", "BLOCK", 
      "IF", "ELSE", "DOWHILE", "WHILE", "FOR", "CLASS", "ESCSEQ", "ESCLINE", 
      "ESCTAB", "ESCRET"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "'''", "'\"'", "'\\'", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "'n'", 
      "'t'", "'r'"
    },
    std::vector<std::string>{
      "", "INTLIT", "REALLIT", "CHARLIT", "STRINGLIT", "NAME", "WS", "EOL", 
      "SQUOTE", "DQUOTE", "BSLASH", "SCOMMENT", "MCOMMENT", "OR", "AND", 
      "EQUAL", "NOTEQUAL", "BITLSHIFT", "BITRSHIFT", "GREATEREQ", "LESSEQ", 
      "GREATER", "LESS", "ADD", "SUBTRACT", "MULTIPLY", "DIVIDE", "MODULUS", 
      "NOT", "BITOR", "BITAND", "BITNOT", "BITXOR", "ACCESS", "ASSIGN", 
      "OBRACK", "CBRACK", "OBRACE", "CBRACE", "OPAREN", "CPAREN", "COMMA", 
      "COLON", "EOS", "BOOL", "CHAR", "INT", "LONG", "REAL", "TRUE", "FALSE", 
      "VOID", "BREAK", "RETURN", "END", "BLOCK", "IF", "ELSE", "DOWHILE", 
      "WHILE", "FOR", "CLASS", "ESCSEQ", "ESCLINE", "ESCTAB", "ESCRET"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,65,776,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,1,0,4,0,139,8,0,11,0,12,
  	0,140,1,0,5,0,144,8,0,10,0,12,0,147,9,0,1,1,4,1,150,8,1,11,1,12,1,151,
  	1,1,1,1,5,1,156,8,1,10,1,12,1,159,9,1,1,1,5,1,162,8,1,10,1,12,1,165,9,
  	1,1,1,1,1,4,1,169,8,1,11,1,12,1,170,3,1,173,8,1,1,1,5,1,176,8,1,10,1,
  	12,1,179,9,1,1,2,1,2,1,2,3,2,184,8,2,1,2,1,2,5,2,188,8,2,10,2,12,2,191,
  	9,2,1,3,1,3,1,3,5,3,196,8,3,10,3,12,3,199,9,3,1,3,1,3,5,3,203,8,3,10,
  	3,12,3,206,9,3,1,4,1,4,3,4,210,8,4,1,4,1,4,1,4,5,4,215,8,4,10,4,12,4,
  	218,9,4,1,4,5,4,221,8,4,10,4,12,4,224,9,4,1,4,1,4,1,5,1,5,1,6,1,6,1,7,
  	1,7,1,8,4,8,235,8,8,11,8,12,8,236,1,8,1,8,1,9,3,9,242,8,9,1,9,1,9,1,9,
  	1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,5,13,256,8,13,10,13,12,13,
  	259,9,13,1,13,1,13,3,13,263,8,13,1,13,5,13,266,8,13,10,13,12,13,269,9,
  	13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,5,14,278,8,14,10,14,12,14,281,9,
  	14,1,14,1,14,1,14,1,14,1,14,5,14,288,8,14,10,14,12,14,291,9,14,1,14,1,
  	14,1,15,1,15,1,15,1,15,5,15,299,8,15,10,15,12,15,302,9,15,1,16,1,16,1,
  	16,1,16,5,16,308,8,16,10,16,12,16,311,9,16,1,17,1,17,1,17,1,17,5,17,317,
  	8,17,10,17,12,17,320,9,17,1,18,1,18,1,18,1,18,5,18,326,8,18,10,18,12,
  	18,329,9,18,1,19,1,19,1,19,1,19,5,19,335,8,19,10,19,12,19,338,9,19,1,
  	20,1,20,1,20,1,20,5,20,344,8,20,10,20,12,20,347,9,20,1,21,1,21,1,21,1,
  	21,5,21,353,8,21,10,21,12,21,356,9,21,1,22,1,22,1,22,1,22,5,22,362,8,
  	22,10,22,12,22,365,9,22,1,23,1,23,5,23,369,8,23,10,23,12,23,372,9,23,
  	1,24,1,24,5,24,376,8,24,10,24,12,24,379,9,24,1,25,1,25,5,25,383,8,25,
  	10,25,12,25,386,9,25,1,26,1,26,5,26,390,8,26,10,26,12,26,393,9,26,1,27,
  	1,27,5,27,397,8,27,10,27,12,27,400,9,27,1,28,1,28,5,28,404,8,28,10,28,
  	12,28,407,9,28,1,29,1,29,5,29,411,8,29,10,29,12,29,414,9,29,1,30,1,30,
  	5,30,418,8,30,10,30,12,30,421,9,30,1,31,1,31,5,31,425,8,31,10,31,12,31,
  	428,9,31,1,32,1,32,5,32,432,8,32,10,32,12,32,435,9,32,1,33,1,33,5,33,
  	439,8,33,10,33,12,33,442,9,33,1,34,1,34,5,34,446,8,34,10,34,12,34,449,
  	9,34,1,35,1,35,5,35,453,8,35,10,35,12,35,456,9,35,1,36,1,36,5,36,460,
  	8,36,10,36,12,36,463,9,36,1,37,1,37,5,37,467,8,37,10,37,12,37,470,9,37,
  	1,38,1,38,5,38,474,8,38,10,38,12,38,477,9,38,1,39,1,39,5,39,481,8,39,
  	10,39,12,39,484,9,39,1,40,1,40,5,40,488,8,40,10,40,12,40,491,9,40,1,41,
  	1,41,5,41,495,8,41,10,41,12,41,498,9,41,1,41,1,41,1,42,1,42,5,42,504,
  	8,42,10,42,12,42,507,9,42,1,42,1,42,1,43,1,43,5,43,513,8,43,10,43,12,
  	43,516,9,43,1,43,1,43,1,44,1,44,5,44,522,8,44,10,44,12,44,525,9,44,1,
  	44,1,44,1,45,1,45,5,45,531,8,45,10,45,12,45,534,9,45,1,45,1,45,1,46,1,
  	46,1,46,1,46,1,46,1,46,5,46,544,8,46,10,46,12,46,547,9,46,1,47,1,47,1,
  	47,1,47,1,47,1,47,5,47,555,8,47,10,47,12,47,558,9,47,1,48,1,48,1,48,1,
  	48,1,48,5,48,565,8,48,10,48,12,48,568,9,48,1,49,1,49,1,49,1,49,1,49,1,
  	49,5,49,576,8,49,10,49,12,49,579,9,49,1,50,1,50,1,50,1,50,1,50,1,50,5,
  	50,587,8,50,10,50,12,50,590,9,50,1,51,1,51,1,51,1,51,1,51,1,51,5,51,598,
  	8,51,10,51,12,51,601,9,51,1,52,1,52,1,52,1,52,1,52,1,52,1,52,5,52,610,
  	8,52,10,52,12,52,613,9,52,1,53,1,53,1,53,1,53,1,53,1,53,5,53,621,8,53,
  	10,53,12,53,624,9,53,1,54,1,54,1,54,1,54,1,54,1,54,1,54,5,54,633,8,54,
  	10,54,12,54,636,9,54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,
  	5,55,648,8,55,10,55,12,55,651,9,55,1,55,1,55,1,56,1,56,1,56,1,56,1,56,
  	5,56,660,8,56,10,56,12,56,663,9,56,1,56,1,56,1,57,1,57,1,57,1,57,1,57,
  	1,57,1,57,5,57,674,8,57,10,57,12,57,677,9,57,1,57,1,57,1,58,1,58,1,58,
  	1,58,5,58,685,8,58,10,58,12,58,688,9,58,1,58,1,58,1,59,1,59,1,59,1,59,
  	1,59,1,59,5,59,698,8,59,10,59,12,59,701,9,59,1,59,1,59,1,60,1,60,1,60,
  	1,60,1,60,1,60,1,60,1,60,1,60,5,60,714,8,60,10,60,12,60,717,9,60,1,60,
  	1,60,1,61,1,61,1,61,1,61,1,61,1,61,1,61,5,61,728,8,61,10,61,12,61,731,
  	9,61,1,61,1,61,1,62,1,62,1,62,1,62,1,62,5,62,740,8,62,10,62,12,62,743,
  	9,62,1,62,1,62,1,63,1,63,1,63,1,63,1,63,1,63,1,63,5,63,754,8,63,10,63,
  	12,63,757,9,63,1,63,1,63,1,64,1,64,1,64,1,64,1,64,3,64,766,8,64,1,65,
  	1,65,1,65,1,66,1,66,1,66,1,67,1,67,1,67,1,279,0,68,1,1,3,2,5,3,7,4,9,
  	5,11,0,13,0,15,0,17,6,19,7,21,8,23,9,25,10,27,11,29,12,31,13,33,14,35,
  	15,37,16,39,17,41,18,43,19,45,20,47,21,49,22,51,23,53,24,55,25,57,26,
  	59,27,61,28,63,29,65,30,67,31,69,32,71,33,73,34,75,35,77,36,79,37,81,
  	38,83,39,85,40,87,41,89,42,91,43,93,44,95,45,97,46,99,47,101,48,103,49,
  	105,50,107,51,109,52,111,53,113,54,115,55,117,56,119,57,121,58,123,59,
  	125,60,127,61,129,62,131,63,133,64,135,65,1,0,7,2,0,39,39,92,92,2,0,34,
  	34,92,92,1,0,48,57,2,0,65,90,97,122,3,0,9,10,13,13,32,32,2,0,10,10,13,
  	13,3,0,34,34,39,39,92,92,849,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,
  	1,0,0,0,0,9,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,
  	0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,
  	35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,
  	0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,
  	0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,
  	67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,
  	0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,
  	0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,
  	99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,
  	109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,
  	119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,
  	129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,1,138,1,0,0,0,3,
  	172,1,0,0,0,5,180,1,0,0,0,7,192,1,0,0,0,9,209,1,0,0,0,11,227,1,0,0,0,
  	13,229,1,0,0,0,15,231,1,0,0,0,17,234,1,0,0,0,19,241,1,0,0,0,21,247,1,
  	0,0,0,23,249,1,0,0,0,25,251,1,0,0,0,27,253,1,0,0,0,29,272,1,0,0,0,31,
  	294,1,0,0,0,33,303,1,0,0,0,35,312,1,0,0,0,37,321,1,0,0,0,39,330,1,0,0,
  	0,41,339,1,0,0,0,43,348,1,0,0,0,45,357,1,0,0,0,47,366,1,0,0,0,49,373,
  	1,0,0,0,51,380,1,0,0,0,53,387,1,0,0,0,55,394,1,0,0,0,57,401,1,0,0,0,59,
  	408,1,0,0,0,61,415,1,0,0,0,63,422,1,0,0,0,65,429,1,0,0,0,67,436,1,0,0,
  	0,69,443,1,0,0,0,71,450,1,0,0,0,73,457,1,0,0,0,75,464,1,0,0,0,77,471,
  	1,0,0,0,79,478,1,0,0,0,81,485,1,0,0,0,83,492,1,0,0,0,85,501,1,0,0,0,87,
  	510,1,0,0,0,89,519,1,0,0,0,91,528,1,0,0,0,93,537,1,0,0,0,95,548,1,0,0,
  	0,97,559,1,0,0,0,99,569,1,0,0,0,101,580,1,0,0,0,103,591,1,0,0,0,105,602,
  	1,0,0,0,107,614,1,0,0,0,109,625,1,0,0,0,111,639,1,0,0,0,113,654,1,0,0,
  	0,115,666,1,0,0,0,117,680,1,0,0,0,119,691,1,0,0,0,121,704,1,0,0,0,123,
  	720,1,0,0,0,125,734,1,0,0,0,127,746,1,0,0,0,129,760,1,0,0,0,131,767,1,
  	0,0,0,133,770,1,0,0,0,135,773,1,0,0,0,137,139,3,11,5,0,138,137,1,0,0,
  	0,139,140,1,0,0,0,140,138,1,0,0,0,140,141,1,0,0,0,141,145,1,0,0,0,142,
  	144,3,17,8,0,143,142,1,0,0,0,144,147,1,0,0,0,145,143,1,0,0,0,145,146,
  	1,0,0,0,146,2,1,0,0,0,147,145,1,0,0,0,148,150,3,11,5,0,149,148,1,0,0,
  	0,150,151,1,0,0,0,151,149,1,0,0,0,151,152,1,0,0,0,152,153,1,0,0,0,153,
  	157,5,46,0,0,154,156,3,11,5,0,155,154,1,0,0,0,156,159,1,0,0,0,157,155,
  	1,0,0,0,157,158,1,0,0,0,158,173,1,0,0,0,159,157,1,0,0,0,160,162,3,11,
  	5,0,161,160,1,0,0,0,162,165,1,0,0,0,163,161,1,0,0,0,163,164,1,0,0,0,164,
  	166,1,0,0,0,165,163,1,0,0,0,166,168,5,46,0,0,167,169,3,11,5,0,168,167,
  	1,0,0,0,169,170,1,0,0,0,170,168,1,0,0,0,170,171,1,0,0,0,171,173,1,0,0,
  	0,172,149,1,0,0,0,172,163,1,0,0,0,173,177,1,0,0,0,174,176,3,17,8,0,175,
  	174,1,0,0,0,176,179,1,0,0,0,177,175,1,0,0,0,177,178,1,0,0,0,178,4,1,0,
  	0,0,179,177,1,0,0,0,180,183,3,21,10,0,181,184,8,0,0,0,182,184,3,129,64,
  	0,183,181,1,0,0,0,183,182,1,0,0,0,184,185,1,0,0,0,185,189,3,21,10,0,186,
  	188,3,17,8,0,187,186,1,0,0,0,188,191,1,0,0,0,189,187,1,0,0,0,189,190,
  	1,0,0,0,190,6,1,0,0,0,191,189,1,0,0,0,192,197,3,23,11,0,193,196,8,1,0,
  	0,194,196,3,129,64,0,195,193,1,0,0,0,195,194,1,0,0,0,196,199,1,0,0,0,
  	197,195,1,0,0,0,197,198,1,0,0,0,198,200,1,0,0,0,199,197,1,0,0,0,200,204,
  	3,23,11,0,201,203,3,17,8,0,202,201,1,0,0,0,203,206,1,0,0,0,204,202,1,
  	0,0,0,204,205,1,0,0,0,205,8,1,0,0,0,206,204,1,0,0,0,207,210,3,11,5,0,
  	208,210,3,15,7,0,209,207,1,0,0,0,209,208,1,0,0,0,210,216,1,0,0,0,211,
  	215,3,11,5,0,212,215,3,13,6,0,213,215,3,15,7,0,214,211,1,0,0,0,214,212,
  	1,0,0,0,214,213,1,0,0,0,215,218,1,0,0,0,216,214,1,0,0,0,216,217,1,0,0,
  	0,217,222,1,0,0,0,218,216,1,0,0,0,219,221,3,17,8,0,220,219,1,0,0,0,221,
  	224,1,0,0,0,222,220,1,0,0,0,222,223,1,0,0,0,223,225,1,0,0,0,224,222,1,
  	0,0,0,225,226,6,4,0,0,226,10,1,0,0,0,227,228,7,2,0,0,228,12,1,0,0,0,229,
  	230,7,3,0,0,230,14,1,0,0,0,231,232,5,95,0,0,232,16,1,0,0,0,233,235,7,
  	4,0,0,234,233,1,0,0,0,235,236,1,0,0,0,236,234,1,0,0,0,236,237,1,0,0,0,
  	237,238,1,0,0,0,238,239,6,8,1,0,239,18,1,0,0,0,240,242,5,13,0,0,241,240,
  	1,0,0,0,241,242,1,0,0,0,242,243,1,0,0,0,243,244,5,10,0,0,244,245,1,0,
  	0,0,245,246,6,9,1,0,246,20,1,0,0,0,247,248,5,39,0,0,248,22,1,0,0,0,249,
  	250,5,34,0,0,250,24,1,0,0,0,251,252,5,92,0,0,252,26,1,0,0,0,253,257,5,
  	35,0,0,254,256,8,5,0,0,255,254,1,0,0,0,256,259,1,0,0,0,257,255,1,0,0,
  	0,257,258,1,0,0,0,258,262,1,0,0,0,259,257,1,0,0,0,260,263,3,19,9,0,261,
  	263,5,0,0,1,262,260,1,0,0,0,262,261,1,0,0,0,263,267,1,0,0,0,264,266,3,
  	17,8,0,265,264,1,0,0,0,266,269,1,0,0,0,267,265,1,0,0,0,267,268,1,0,0,
  	0,268,270,1,0,0,0,269,267,1,0,0,0,270,271,6,13,1,0,271,28,1,0,0,0,272,
  	273,5,96,0,0,273,274,5,96,0,0,274,275,5,96,0,0,275,279,1,0,0,0,276,278,
  	9,0,0,0,277,276,1,0,0,0,278,281,1,0,0,0,279,280,1,0,0,0,279,277,1,0,0,
  	0,280,282,1,0,0,0,281,279,1,0,0,0,282,283,5,96,0,0,283,284,5,96,0,0,284,
  	285,5,96,0,0,285,289,1,0,0,0,286,288,3,17,8,0,287,286,1,0,0,0,288,291,
  	1,0,0,0,289,287,1,0,0,0,289,290,1,0,0,0,290,292,1,0,0,0,291,289,1,0,0,
  	0,292,293,6,14,1,0,293,30,1,0,0,0,294,295,5,124,0,0,295,296,5,124,0,0,
  	296,300,1,0,0,0,297,299,3,17,8,0,298,297,1,0,0,0,299,302,1,0,0,0,300,
  	298,1,0,0,0,300,301,1,0,0,0,301,32,1,0,0,0,302,300,1,0,0,0,303,304,5,
  	38,0,0,304,305,5,38,0,0,305,309,1,0,0,0,306,308,3,17,8,0,307,306,1,0,
  	0,0,308,311,1,0,0,0,309,307,1,0,0,0,309,310,1,0,0,0,310,34,1,0,0,0,311,
  	309,1,0,0,0,312,313,5,61,0,0,313,314,5,61,0,0,314,318,1,0,0,0,315,317,
  	3,17,8,0,316,315,1,0,0,0,317,320,1,0,0,0,318,316,1,0,0,0,318,319,1,0,
  	0,0,319,36,1,0,0,0,320,318,1,0,0,0,321,322,5,33,0,0,322,323,5,61,0,0,
  	323,327,1,0,0,0,324,326,3,17,8,0,325,324,1,0,0,0,326,329,1,0,0,0,327,
  	325,1,0,0,0,327,328,1,0,0,0,328,38,1,0,0,0,329,327,1,0,0,0,330,331,5,
  	60,0,0,331,332,5,60,0,0,332,336,1,0,0,0,333,335,3,17,8,0,334,333,1,0,
  	0,0,335,338,1,0,0,0,336,334,1,0,0,0,336,337,1,0,0,0,337,40,1,0,0,0,338,
  	336,1,0,0,0,339,340,5,62,0,0,340,341,5,62,0,0,341,345,1,0,0,0,342,344,
  	3,17,8,0,343,342,1,0,0,0,344,347,1,0,0,0,345,343,1,0,0,0,345,346,1,0,
  	0,0,346,42,1,0,0,0,347,345,1,0,0,0,348,349,5,62,0,0,349,350,5,61,0,0,
  	350,354,1,0,0,0,351,353,3,17,8,0,352,351,1,0,0,0,353,356,1,0,0,0,354,
  	352,1,0,0,0,354,355,1,0,0,0,355,44,1,0,0,0,356,354,1,0,0,0,357,358,5,
  	60,0,0,358,359,5,61,0,0,359,363,1,0,0,0,360,362,3,17,8,0,361,360,1,0,
  	0,0,362,365,1,0,0,0,363,361,1,0,0,0,363,364,1,0,0,0,364,46,1,0,0,0,365,
  	363,1,0,0,0,366,370,5,62,0,0,367,369,3,17,8,0,368,367,1,0,0,0,369,372,
  	1,0,0,0,370,368,1,0,0,0,370,371,1,0,0,0,371,48,1,0,0,0,372,370,1,0,0,
  	0,373,377,5,60,0,0,374,376,3,17,8,0,375,374,1,0,0,0,376,379,1,0,0,0,377,
  	375,1,0,0,0,377,378,1,0,0,0,378,50,1,0,0,0,379,377,1,0,0,0,380,384,5,
  	43,0,0,381,383,3,17,8,0,382,381,1,0,0,0,383,386,1,0,0,0,384,382,1,0,0,
  	0,384,385,1,0,0,0,385,52,1,0,0,0,386,384,1,0,0,0,387,391,5,45,0,0,388,
  	390,3,17,8,0,389,388,1,0,0,0,390,393,1,0,0,0,391,389,1,0,0,0,391,392,
  	1,0,0,0,392,54,1,0,0,0,393,391,1,0,0,0,394,398,5,42,0,0,395,397,3,17,
  	8,0,396,395,1,0,0,0,397,400,1,0,0,0,398,396,1,0,0,0,398,399,1,0,0,0,399,
  	56,1,0,0,0,400,398,1,0,0,0,401,405,5,47,0,0,402,404,3,17,8,0,403,402,
  	1,0,0,0,404,407,1,0,0,0,405,403,1,0,0,0,405,406,1,0,0,0,406,58,1,0,0,
  	0,407,405,1,0,0,0,408,412,5,37,0,0,409,411,3,17,8,0,410,409,1,0,0,0,411,
  	414,1,0,0,0,412,410,1,0,0,0,412,413,1,0,0,0,413,60,1,0,0,0,414,412,1,
  	0,0,0,415,419,5,33,0,0,416,418,3,17,8,0,417,416,1,0,0,0,418,421,1,0,0,
  	0,419,417,1,0,0,0,419,420,1,0,0,0,420,62,1,0,0,0,421,419,1,0,0,0,422,
  	426,5,124,0,0,423,425,3,17,8,0,424,423,1,0,0,0,425,428,1,0,0,0,426,424,
  	1,0,0,0,426,427,1,0,0,0,427,64,1,0,0,0,428,426,1,0,0,0,429,433,5,38,0,
  	0,430,432,3,17,8,0,431,430,1,0,0,0,432,435,1,0,0,0,433,431,1,0,0,0,433,
  	434,1,0,0,0,434,66,1,0,0,0,435,433,1,0,0,0,436,440,5,126,0,0,437,439,
  	3,17,8,0,438,437,1,0,0,0,439,442,1,0,0,0,440,438,1,0,0,0,440,441,1,0,
  	0,0,441,68,1,0,0,0,442,440,1,0,0,0,443,447,5,94,0,0,444,446,3,17,8,0,
  	445,444,1,0,0,0,446,449,1,0,0,0,447,445,1,0,0,0,447,448,1,0,0,0,448,70,
  	1,0,0,0,449,447,1,0,0,0,450,454,5,46,0,0,451,453,3,17,8,0,452,451,1,0,
  	0,0,453,456,1,0,0,0,454,452,1,0,0,0,454,455,1,0,0,0,455,72,1,0,0,0,456,
  	454,1,0,0,0,457,461,5,61,0,0,458,460,3,17,8,0,459,458,1,0,0,0,460,463,
  	1,0,0,0,461,459,1,0,0,0,461,462,1,0,0,0,462,74,1,0,0,0,463,461,1,0,0,
  	0,464,468,5,91,0,0,465,467,3,17,8,0,466,465,1,0,0,0,467,470,1,0,0,0,468,
  	466,1,0,0,0,468,469,1,0,0,0,469,76,1,0,0,0,470,468,1,0,0,0,471,475,5,
  	93,0,0,472,474,3,17,8,0,473,472,1,0,0,0,474,477,1,0,0,0,475,473,1,0,0,
  	0,475,476,1,0,0,0,476,78,1,0,0,0,477,475,1,0,0,0,478,482,5,123,0,0,479,
  	481,3,17,8,0,480,479,1,0,0,0,481,484,1,0,0,0,482,480,1,0,0,0,482,483,
  	1,0,0,0,483,80,1,0,0,0,484,482,1,0,0,0,485,489,5,125,0,0,486,488,3,17,
  	8,0,487,486,1,0,0,0,488,491,1,0,0,0,489,487,1,0,0,0,489,490,1,0,0,0,490,
  	82,1,0,0,0,491,489,1,0,0,0,492,496,5,40,0,0,493,495,3,17,8,0,494,493,
  	1,0,0,0,495,498,1,0,0,0,496,494,1,0,0,0,496,497,1,0,0,0,497,499,1,0,0,
  	0,498,496,1,0,0,0,499,500,6,41,1,0,500,84,1,0,0,0,501,505,5,41,0,0,502,
  	504,3,17,8,0,503,502,1,0,0,0,504,507,1,0,0,0,505,503,1,0,0,0,505,506,
  	1,0,0,0,506,508,1,0,0,0,507,505,1,0,0,0,508,509,6,42,1,0,509,86,1,0,0,
  	0,510,514,5,44,0,0,511,513,3,17,8,0,512,511,1,0,0,0,513,516,1,0,0,0,514,
  	512,1,0,0,0,514,515,1,0,0,0,515,517,1,0,0,0,516,514,1,0,0,0,517,518,6,
  	43,1,0,518,88,1,0,0,0,519,523,5,58,0,0,520,522,3,17,8,0,521,520,1,0,0,
  	0,522,525,1,0,0,0,523,521,1,0,0,0,523,524,1,0,0,0,524,526,1,0,0,0,525,
  	523,1,0,0,0,526,527,6,44,1,0,527,90,1,0,0,0,528,532,5,59,0,0,529,531,
  	3,17,8,0,530,529,1,0,0,0,531,534,1,0,0,0,532,530,1,0,0,0,532,533,1,0,
  	0,0,533,535,1,0,0,0,534,532,1,0,0,0,535,536,6,45,1,0,536,92,1,0,0,0,537,
  	538,5,98,0,0,538,539,5,111,0,0,539,540,5,111,0,0,540,541,5,108,0,0,541,
  	545,1,0,0,0,542,544,3,17,8,0,543,542,1,0,0,0,544,547,1,0,0,0,545,543,
  	1,0,0,0,545,546,1,0,0,0,546,94,1,0,0,0,547,545,1,0,0,0,548,549,5,99,0,
  	0,549,550,5,104,0,0,550,551,5,97,0,0,551,552,5,114,0,0,552,556,1,0,0,
  	0,553,555,3,17,8,0,554,553,1,0,0,0,555,558,1,0,0,0,556,554,1,0,0,0,556,
  	557,1,0,0,0,557,96,1,0,0,0,558,556,1,0,0,0,559,560,5,105,0,0,560,561,
  	5,110,0,0,561,562,5,116,0,0,562,566,1,0,0,0,563,565,3,17,8,0,564,563,
  	1,0,0,0,565,568,1,0,0,0,566,564,1,0,0,0,566,567,1,0,0,0,567,98,1,0,0,
  	0,568,566,1,0,0,0,569,570,5,108,0,0,570,571,5,111,0,0,571,572,5,110,0,
  	0,572,573,5,103,0,0,573,577,1,0,0,0,574,576,3,17,8,0,575,574,1,0,0,0,
  	576,579,1,0,0,0,577,575,1,0,0,0,577,578,1,0,0,0,578,100,1,0,0,0,579,577,
  	1,0,0,0,580,581,5,114,0,0,581,582,5,101,0,0,582,583,5,97,0,0,583,584,
  	5,108,0,0,584,588,1,0,0,0,585,587,3,17,8,0,586,585,1,0,0,0,587,590,1,
  	0,0,0,588,586,1,0,0,0,588,589,1,0,0,0,589,102,1,0,0,0,590,588,1,0,0,0,
  	591,592,5,116,0,0,592,593,5,114,0,0,593,594,5,117,0,0,594,595,5,101,0,
  	0,595,599,1,0,0,0,596,598,3,17,8,0,597,596,1,0,0,0,598,601,1,0,0,0,599,
  	597,1,0,0,0,599,600,1,0,0,0,600,104,1,0,0,0,601,599,1,0,0,0,602,603,5,
  	102,0,0,603,604,5,97,0,0,604,605,5,108,0,0,605,606,5,115,0,0,606,607,
  	5,101,0,0,607,611,1,0,0,0,608,610,3,17,8,0,609,608,1,0,0,0,610,613,1,
  	0,0,0,611,609,1,0,0,0,611,612,1,0,0,0,612,106,1,0,0,0,613,611,1,0,0,0,
  	614,615,5,118,0,0,615,616,5,111,0,0,616,617,5,105,0,0,617,618,5,100,0,
  	0,618,622,1,0,0,0,619,621,3,17,8,0,620,619,1,0,0,0,621,624,1,0,0,0,622,
  	620,1,0,0,0,622,623,1,0,0,0,623,108,1,0,0,0,624,622,1,0,0,0,625,626,5,
  	98,0,0,626,627,5,114,0,0,627,628,5,101,0,0,628,629,5,97,0,0,629,630,5,
  	107,0,0,630,634,1,0,0,0,631,633,3,17,8,0,632,631,1,0,0,0,633,636,1,0,
  	0,0,634,632,1,0,0,0,634,635,1,0,0,0,635,637,1,0,0,0,636,634,1,0,0,0,637,
  	638,6,54,1,0,638,110,1,0,0,0,639,640,5,114,0,0,640,641,5,101,0,0,641,
  	642,5,116,0,0,642,643,5,117,0,0,643,644,5,114,0,0,644,645,5,110,0,0,645,
  	649,1,0,0,0,646,648,3,17,8,0,647,646,1,0,0,0,648,651,1,0,0,0,649,647,
  	1,0,0,0,649,650,1,0,0,0,650,652,1,0,0,0,651,649,1,0,0,0,652,653,6,55,
  	1,0,653,112,1,0,0,0,654,655,5,101,0,0,655,656,5,110,0,0,656,657,5,100,
  	0,0,657,661,1,0,0,0,658,660,3,17,8,0,659,658,1,0,0,0,660,663,1,0,0,0,
  	661,659,1,0,0,0,661,662,1,0,0,0,662,664,1,0,0,0,663,661,1,0,0,0,664,665,
  	6,56,1,0,665,114,1,0,0,0,666,667,5,98,0,0,667,668,5,108,0,0,668,669,5,
  	111,0,0,669,670,5,99,0,0,670,671,5,107,0,0,671,675,1,0,0,0,672,674,3,
  	17,8,0,673,672,1,0,0,0,674,677,1,0,0,0,675,673,1,0,0,0,675,676,1,0,0,
  	0,676,678,1,0,0,0,677,675,1,0,0,0,678,679,6,57,1,0,679,116,1,0,0,0,680,
  	681,5,105,0,0,681,682,5,102,0,0,682,686,1,0,0,0,683,685,3,17,8,0,684,
  	683,1,0,0,0,685,688,1,0,0,0,686,684,1,0,0,0,686,687,1,0,0,0,687,689,1,
  	0,0,0,688,686,1,0,0,0,689,690,6,58,1,0,690,118,1,0,0,0,691,692,5,101,
  	0,0,692,693,5,108,0,0,693,694,5,115,0,0,694,695,5,101,0,0,695,699,1,0,
  	0,0,696,698,3,17,8,0,697,696,1,0,0,0,698,701,1,0,0,0,699,697,1,0,0,0,
  	699,700,1,0,0,0,700,702,1,0,0,0,701,699,1,0,0,0,702,703,6,59,1,0,703,
  	120,1,0,0,0,704,705,5,100,0,0,705,706,5,111,0,0,706,707,5,119,0,0,707,
  	708,5,104,0,0,708,709,5,105,0,0,709,710,5,108,0,0,710,711,5,101,0,0,711,
  	715,1,0,0,0,712,714,3,17,8,0,713,712,1,0,0,0,714,717,1,0,0,0,715,713,
  	1,0,0,0,715,716,1,0,0,0,716,718,1,0,0,0,717,715,1,0,0,0,718,719,6,60,
  	1,0,719,122,1,0,0,0,720,721,5,119,0,0,721,722,5,104,0,0,722,723,5,105,
  	0,0,723,724,5,108,0,0,724,725,5,101,0,0,725,729,1,0,0,0,726,728,3,17,
  	8,0,727,726,1,0,0,0,728,731,1,0,0,0,729,727,1,0,0,0,729,730,1,0,0,0,730,
  	732,1,0,0,0,731,729,1,0,0,0,732,733,6,61,1,0,733,124,1,0,0,0,734,735,
  	5,102,0,0,735,736,5,111,0,0,736,737,5,114,0,0,737,741,1,0,0,0,738,740,
  	3,17,8,0,739,738,1,0,0,0,740,743,1,0,0,0,741,739,1,0,0,0,741,742,1,0,
  	0,0,742,744,1,0,0,0,743,741,1,0,0,0,744,745,6,62,1,0,745,126,1,0,0,0,
  	746,747,5,99,0,0,747,748,5,108,0,0,748,749,5,97,0,0,749,750,5,115,0,0,
  	750,751,5,115,0,0,751,755,1,0,0,0,752,754,3,17,8,0,753,752,1,0,0,0,754,
  	757,1,0,0,0,755,753,1,0,0,0,755,756,1,0,0,0,756,758,1,0,0,0,757,755,1,
  	0,0,0,758,759,6,63,1,0,759,128,1,0,0,0,760,765,3,25,12,0,761,766,7,6,
  	0,0,762,766,3,131,65,0,763,766,3,133,66,0,764,766,3,135,67,0,765,761,
  	1,0,0,0,765,762,1,0,0,0,765,763,1,0,0,0,765,764,1,0,0,0,766,130,1,0,0,
  	0,767,768,5,110,0,0,768,769,6,65,2,0,769,132,1,0,0,0,770,771,5,116,0,
  	0,771,772,6,66,3,0,772,134,1,0,0,0,773,774,5,114,0,0,774,775,6,67,4,0,
  	775,136,1,0,0,0,75,0,140,145,151,157,163,170,172,177,183,189,195,197,
  	204,209,214,216,222,236,241,257,262,267,279,289,300,309,318,327,336,345,
  	354,363,370,377,384,391,398,405,412,419,426,433,440,447,454,461,468,475,
  	482,489,496,505,514,523,532,545,556,566,577,588,599,611,622,634,649,661,
  	675,686,699,715,729,741,755,765,5,1,4,0,6,0,0,1,65,1,1,66,2,1,67,3
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  bazlexerLexerStaticData = staticData.release();
}

}

BazLexer::BazLexer(CharStream *input) : Lexer(input) {
  BazLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *bazlexerLexerStaticData->atn, bazlexerLexerStaticData->decisionToDFA, bazlexerLexerStaticData->sharedContextCache);
}

BazLexer::~BazLexer() {
  delete _interpreter;
}

std::string BazLexer::getGrammarFileName() const {
  return "Baz.g4";
}

const std::vector<std::string>& BazLexer::getRuleNames() const {
  return bazlexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& BazLexer::getChannelNames() const {
  return bazlexerLexerStaticData->channelNames;
}

const std::vector<std::string>& BazLexer::getModeNames() const {
  return bazlexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& BazLexer::getVocabulary() const {
  return bazlexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView BazLexer::getSerializedATN() const {
  return bazlexerLexerStaticData->serializedATN;
}

const atn::ATN& BazLexer::getATN() const {
  return *bazlexerLexerStaticData->atn;
}


void BazLexer::action(RuleContext *context, size_t ruleIndex, size_t actionIndex) {
  switch (ruleIndex) {
    case 4: NAMEAction(antlrcpp::downCast<antlr4::RuleContext *>(context), actionIndex); break;
    case 65: ESCLINEAction(antlrcpp::downCast<antlr4::RuleContext *>(context), actionIndex); break;
    case 66: ESCTABAction(antlrcpp::downCast<antlr4::RuleContext *>(context), actionIndex); break;
    case 67: ESCRETAction(antlrcpp::downCast<antlr4::RuleContext *>(context), actionIndex); break;

  default:
    break;
  }
}

void BazLexer::NAMEAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 0:  if(isKeyword(getText())) skip();  break;

  default:
    break;
  }
}

void BazLexer::ESCLINEAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 1:  setText("\n");  break;

  default:
    break;
  }
}

void BazLexer::ESCTABAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 2:  setText("\t");  break;

  default:
    break;
  }
}

void BazLexer::ESCRETAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 3:  setText("\r");  break;

  default:
    break;
  }
}



void BazLexer::initialize() {
  ::antlr4::internal::call_once(bazlexerLexerOnceFlag, bazlexerLexerInitialize);
}
