
// Generated from antlr/Baz.g4 by ANTLR 4.12.0


#include "parse/BazLexer.h"


using namespace antlr4;

using namespace parse;


using namespace antlr4;

namespace {

struct BazLexerStaticData final {
  BazLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  BazLexerStaticData(const BazLexerStaticData&) = delete;
  BazLexerStaticData(BazLexerStaticData&&) = delete;
  BazLexerStaticData& operator=(const BazLexerStaticData&) = delete;
  BazLexerStaticData& operator=(BazLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag bazlexerLexerOnceFlag;
BazLexerStaticData *bazlexerLexerStaticData = nullptr;

void bazlexerLexerInitialize() {
  assert(bazlexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<BazLexerStaticData>(
    std::vector<std::string>{
      "DIGIT", "LETTER", "UNDERSCORE", "WS", "EOL", "SQUOTE", "DQUOTE", 
      "BSLASH", "SCOMMENT", "MCOMMENT", "OR", "AND", "EQUAL", "NOTEQUAL", 
      "BITLSHIFT", "BITRSHIFT", "GREATEREQ", "LESSEQ", "GREATER", "LESS", 
      "ADD", "SUBTRACT", "MULTIPLY", "DIVIDE", "MODULUS", "NOT", "BITOR", 
      "BITAND", "BITNOT", "BITXOR", "ACCESS", "ASSIGN", "OBRACK", "CBRACK", 
      "OBRACE", "CBRACE", "OPAREN", "CPAREN", "COMMA", "COLON", "EOS", "BOOL", 
      "CHAR", "INT", "LONG", "REAL", "TRUE", "FALSE", "VOID", "BREAK", "RETURN", 
      "END", "BLOCK", "IF", "ELSE", "DOWHILE", "WHILE", "FOR", "CLASS", 
      "SYSCALL", "ESCSEQ", "ESCLINE", "ESCTAB", "ESCRET", "INTLIT", "REALLIT", 
      "CHARLIT", "STRINGLIT", "NAME"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "", "", "'''", "'\"'", "'\\'", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "'n'", "'t'", "'r'"
    },
    std::vector<std::string>{
      "", "WS", "EOL", "SQUOTE", "DQUOTE", "BSLASH", "SCOMMENT", "MCOMMENT", 
      "OR", "AND", "EQUAL", "NOTEQUAL", "BITLSHIFT", "BITRSHIFT", "GREATEREQ", 
      "LESSEQ", "GREATER", "LESS", "ADD", "SUBTRACT", "MULTIPLY", "DIVIDE", 
      "MODULUS", "NOT", "BITOR", "BITAND", "BITNOT", "BITXOR", "ACCESS", 
      "ASSIGN", "OBRACK", "CBRACK", "OBRACE", "CBRACE", "OPAREN", "CPAREN", 
      "COMMA", "COLON", "EOS", "BOOL", "CHAR", "INT", "LONG", "REAL", "TRUE", 
      "FALSE", "VOID", "BREAK", "RETURN", "END", "BLOCK", "IF", "ELSE", 
      "DOWHILE", "WHILE", "FOR", "CLASS", "SYSCALL", "ESCSEQ", "ESCLINE", 
      "ESCTAB", "ESCRET", "INTLIT", "REALLIT", "CHARLIT", "STRINGLIT", "NAME"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,66,792,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,1,0,1,0,1,1,1,
  	1,1,2,1,2,1,3,4,3,147,8,3,11,3,12,3,148,1,3,1,3,1,4,3,4,154,8,4,1,4,1,
  	4,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,5,8,168,8,8,10,8,12,8,171,9,
  	8,1,8,1,8,3,8,175,8,8,1,8,5,8,178,8,8,10,8,12,8,181,9,8,1,8,1,8,1,9,1,
  	9,1,9,1,9,1,9,5,9,190,8,9,10,9,12,9,193,9,9,1,9,1,9,1,9,1,9,1,9,5,9,200,
  	8,9,10,9,12,9,203,9,9,1,9,1,9,1,10,1,10,1,10,1,10,5,10,211,8,10,10,10,
  	12,10,214,9,10,1,11,1,11,1,11,1,11,5,11,220,8,11,10,11,12,11,223,9,11,
  	1,12,1,12,1,12,1,12,5,12,229,8,12,10,12,12,12,232,9,12,1,13,1,13,1,13,
  	1,13,5,13,238,8,13,10,13,12,13,241,9,13,1,14,1,14,1,14,1,14,5,14,247,
  	8,14,10,14,12,14,250,9,14,1,15,1,15,1,15,1,15,5,15,256,8,15,10,15,12,
  	15,259,9,15,1,16,1,16,1,16,1,16,5,16,265,8,16,10,16,12,16,268,9,16,1,
  	17,1,17,1,17,1,17,5,17,274,8,17,10,17,12,17,277,9,17,1,18,1,18,5,18,281,
  	8,18,10,18,12,18,284,9,18,1,19,1,19,5,19,288,8,19,10,19,12,19,291,9,19,
  	1,20,1,20,5,20,295,8,20,10,20,12,20,298,9,20,1,21,1,21,5,21,302,8,21,
  	10,21,12,21,305,9,21,1,22,1,22,5,22,309,8,22,10,22,12,22,312,9,22,1,23,
  	1,23,5,23,316,8,23,10,23,12,23,319,9,23,1,24,1,24,5,24,323,8,24,10,24,
  	12,24,326,9,24,1,25,1,25,5,25,330,8,25,10,25,12,25,333,9,25,1,26,1,26,
  	5,26,337,8,26,10,26,12,26,340,9,26,1,27,1,27,5,27,344,8,27,10,27,12,27,
  	347,9,27,1,28,1,28,5,28,351,8,28,10,28,12,28,354,9,28,1,29,1,29,5,29,
  	358,8,29,10,29,12,29,361,9,29,1,30,1,30,5,30,365,8,30,10,30,12,30,368,
  	9,30,1,31,1,31,5,31,372,8,31,10,31,12,31,375,9,31,1,32,1,32,5,32,379,
  	8,32,10,32,12,32,382,9,32,1,33,1,33,5,33,386,8,33,10,33,12,33,389,9,33,
  	1,34,1,34,5,34,393,8,34,10,34,12,34,396,9,34,1,35,1,35,5,35,400,8,35,
  	10,35,12,35,403,9,35,1,36,1,36,5,36,407,8,36,10,36,12,36,410,9,36,1,36,
  	1,36,1,37,1,37,5,37,416,8,37,10,37,12,37,419,9,37,1,37,1,37,1,38,1,38,
  	5,38,425,8,38,10,38,12,38,428,9,38,1,38,1,38,1,39,1,39,5,39,434,8,39,
  	10,39,12,39,437,9,39,1,39,1,39,1,40,1,40,5,40,443,8,40,10,40,12,40,446,
  	9,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,5,41,456,8,41,10,41,12,41,
  	459,9,41,1,42,1,42,1,42,1,42,1,42,1,42,5,42,467,8,42,10,42,12,42,470,
  	9,42,1,43,1,43,1,43,1,43,1,43,5,43,477,8,43,10,43,12,43,480,9,43,1,44,
  	1,44,1,44,1,44,1,44,1,44,5,44,488,8,44,10,44,12,44,491,9,44,1,45,1,45,
  	1,45,1,45,1,45,1,45,5,45,499,8,45,10,45,12,45,502,9,45,1,46,1,46,1,46,
  	1,46,1,46,1,46,5,46,510,8,46,10,46,12,46,513,9,46,1,47,1,47,1,47,1,47,
  	1,47,1,47,1,47,5,47,522,8,47,10,47,12,47,525,9,47,1,48,1,48,1,48,1,48,
  	1,48,1,48,5,48,533,8,48,10,48,12,48,536,9,48,1,49,1,49,1,49,1,49,1,49,
  	1,49,1,49,5,49,545,8,49,10,49,12,49,548,9,49,1,49,1,49,1,50,1,50,1,50,
  	1,50,1,50,1,50,1,50,1,50,5,50,560,8,50,10,50,12,50,563,9,50,1,50,1,50,
  	1,51,1,51,1,51,1,51,1,51,5,51,572,8,51,10,51,12,51,575,9,51,1,51,1,51,
  	1,52,1,52,1,52,1,52,1,52,1,52,1,52,5,52,586,8,52,10,52,12,52,589,9,52,
  	1,52,1,52,1,53,1,53,1,53,1,53,5,53,597,8,53,10,53,12,53,600,9,53,1,53,
  	1,53,1,54,1,54,1,54,1,54,1,54,1,54,5,54,610,8,54,10,54,12,54,613,9,54,
  	1,54,1,54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,5,55,626,8,55,
  	10,55,12,55,629,9,55,1,55,1,55,1,56,1,56,1,56,1,56,1,56,1,56,1,56,5,56,
  	640,8,56,10,56,12,56,643,9,56,1,56,1,56,1,57,1,57,1,57,1,57,1,57,5,57,
  	652,8,57,10,57,12,57,655,9,57,1,57,1,57,1,58,1,58,1,58,1,58,1,58,1,58,
  	1,58,5,58,666,8,58,10,58,12,58,669,9,58,1,58,1,58,1,59,1,59,1,59,1,59,
  	1,59,1,59,1,59,1,59,1,59,5,59,682,8,59,10,59,12,59,685,9,59,1,59,1,59,
  	1,60,1,60,1,60,1,60,1,60,3,60,694,8,60,1,61,1,61,1,61,1,62,1,62,1,62,
  	1,63,1,63,1,63,1,64,4,64,706,8,64,11,64,12,64,707,1,64,5,64,711,8,64,
  	10,64,12,64,714,9,64,1,65,4,65,717,8,65,11,65,12,65,718,1,65,1,65,5,65,
  	723,8,65,10,65,12,65,726,9,65,1,65,5,65,729,8,65,10,65,12,65,732,9,65,
  	1,65,1,65,4,65,736,8,65,11,65,12,65,737,3,65,740,8,65,1,65,5,65,743,8,
  	65,10,65,12,65,746,9,65,1,66,1,66,1,66,3,66,751,8,66,1,66,1,66,5,66,755,
  	8,66,10,66,12,66,758,9,66,1,67,1,67,1,67,5,67,763,8,67,10,67,12,67,766,
  	9,67,1,67,1,67,5,67,770,8,67,10,67,12,67,773,9,67,1,68,1,68,3,68,777,
  	8,68,1,68,1,68,1,68,5,68,782,8,68,10,68,12,68,785,9,68,1,68,5,68,788,
  	8,68,10,68,12,68,791,9,68,1,191,0,69,1,0,3,0,5,0,7,1,9,2,11,3,13,4,15,
  	5,17,6,19,7,21,8,23,9,25,10,27,11,29,12,31,13,33,14,35,15,37,16,39,17,
  	41,18,43,19,45,20,47,21,49,22,51,23,53,24,55,25,57,26,59,27,61,28,63,
  	29,65,30,67,31,69,32,71,33,73,34,75,35,77,36,79,37,81,38,83,39,85,40,
  	87,41,89,42,91,43,93,44,95,45,97,46,99,47,101,48,103,49,105,50,107,51,
  	109,52,111,53,113,54,115,55,117,56,119,57,121,58,123,59,125,60,127,61,
  	129,62,131,63,133,64,135,65,137,66,1,0,7,1,0,48,57,2,0,65,90,97,122,3,
  	0,9,10,13,13,32,32,2,0,10,10,13,13,3,0,34,34,39,39,92,92,2,0,39,39,92,
  	92,2,0,34,34,92,92,866,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,
  	0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,
  	0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,
  	1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,
  	0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,
  	0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
  	1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,
  	0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,
  	0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,
  	1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,
  	1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,
  	1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,
  	1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,1,139,
  	1,0,0,0,3,141,1,0,0,0,5,143,1,0,0,0,7,146,1,0,0,0,9,153,1,0,0,0,11,159,
  	1,0,0,0,13,161,1,0,0,0,15,163,1,0,0,0,17,165,1,0,0,0,19,184,1,0,0,0,21,
  	206,1,0,0,0,23,215,1,0,0,0,25,224,1,0,0,0,27,233,1,0,0,0,29,242,1,0,0,
  	0,31,251,1,0,0,0,33,260,1,0,0,0,35,269,1,0,0,0,37,278,1,0,0,0,39,285,
  	1,0,0,0,41,292,1,0,0,0,43,299,1,0,0,0,45,306,1,0,0,0,47,313,1,0,0,0,49,
  	320,1,0,0,0,51,327,1,0,0,0,53,334,1,0,0,0,55,341,1,0,0,0,57,348,1,0,0,
  	0,59,355,1,0,0,0,61,362,1,0,0,0,63,369,1,0,0,0,65,376,1,0,0,0,67,383,
  	1,0,0,0,69,390,1,0,0,0,71,397,1,0,0,0,73,404,1,0,0,0,75,413,1,0,0,0,77,
  	422,1,0,0,0,79,431,1,0,0,0,81,440,1,0,0,0,83,449,1,0,0,0,85,460,1,0,0,
  	0,87,471,1,0,0,0,89,481,1,0,0,0,91,492,1,0,0,0,93,503,1,0,0,0,95,514,
  	1,0,0,0,97,526,1,0,0,0,99,537,1,0,0,0,101,551,1,0,0,0,103,566,1,0,0,0,
  	105,578,1,0,0,0,107,592,1,0,0,0,109,603,1,0,0,0,111,616,1,0,0,0,113,632,
  	1,0,0,0,115,646,1,0,0,0,117,658,1,0,0,0,119,672,1,0,0,0,121,688,1,0,0,
  	0,123,695,1,0,0,0,125,698,1,0,0,0,127,701,1,0,0,0,129,705,1,0,0,0,131,
  	739,1,0,0,0,133,747,1,0,0,0,135,759,1,0,0,0,137,776,1,0,0,0,139,140,7,
  	0,0,0,140,2,1,0,0,0,141,142,7,1,0,0,142,4,1,0,0,0,143,144,5,95,0,0,144,
  	6,1,0,0,0,145,147,7,2,0,0,146,145,1,0,0,0,147,148,1,0,0,0,148,146,1,0,
  	0,0,148,149,1,0,0,0,149,150,1,0,0,0,150,151,6,3,0,0,151,8,1,0,0,0,152,
  	154,5,13,0,0,153,152,1,0,0,0,153,154,1,0,0,0,154,155,1,0,0,0,155,156,
  	5,10,0,0,156,157,1,0,0,0,157,158,6,4,0,0,158,10,1,0,0,0,159,160,5,39,
  	0,0,160,12,1,0,0,0,161,162,5,34,0,0,162,14,1,0,0,0,163,164,5,92,0,0,164,
  	16,1,0,0,0,165,169,5,35,0,0,166,168,8,3,0,0,167,166,1,0,0,0,168,171,1,
  	0,0,0,169,167,1,0,0,0,169,170,1,0,0,0,170,174,1,0,0,0,171,169,1,0,0,0,
  	172,175,3,9,4,0,173,175,5,0,0,1,174,172,1,0,0,0,174,173,1,0,0,0,175,179,
  	1,0,0,0,176,178,3,7,3,0,177,176,1,0,0,0,178,181,1,0,0,0,179,177,1,0,0,
  	0,179,180,1,0,0,0,180,182,1,0,0,0,181,179,1,0,0,0,182,183,6,8,0,0,183,
  	18,1,0,0,0,184,185,5,96,0,0,185,186,5,96,0,0,186,187,5,96,0,0,187,191,
  	1,0,0,0,188,190,9,0,0,0,189,188,1,0,0,0,190,193,1,0,0,0,191,192,1,0,0,
  	0,191,189,1,0,0,0,192,194,1,0,0,0,193,191,1,0,0,0,194,195,5,96,0,0,195,
  	196,5,96,0,0,196,197,5,96,0,0,197,201,1,0,0,0,198,200,3,7,3,0,199,198,
  	1,0,0,0,200,203,1,0,0,0,201,199,1,0,0,0,201,202,1,0,0,0,202,204,1,0,0,
  	0,203,201,1,0,0,0,204,205,6,9,0,0,205,20,1,0,0,0,206,207,5,124,0,0,207,
  	208,5,124,0,0,208,212,1,0,0,0,209,211,3,7,3,0,210,209,1,0,0,0,211,214,
  	1,0,0,0,212,210,1,0,0,0,212,213,1,0,0,0,213,22,1,0,0,0,214,212,1,0,0,
  	0,215,216,5,38,0,0,216,217,5,38,0,0,217,221,1,0,0,0,218,220,3,7,3,0,219,
  	218,1,0,0,0,220,223,1,0,0,0,221,219,1,0,0,0,221,222,1,0,0,0,222,24,1,
  	0,0,0,223,221,1,0,0,0,224,225,5,61,0,0,225,226,5,61,0,0,226,230,1,0,0,
  	0,227,229,3,7,3,0,228,227,1,0,0,0,229,232,1,0,0,0,230,228,1,0,0,0,230,
  	231,1,0,0,0,231,26,1,0,0,0,232,230,1,0,0,0,233,234,5,33,0,0,234,235,5,
  	61,0,0,235,239,1,0,0,0,236,238,3,7,3,0,237,236,1,0,0,0,238,241,1,0,0,
  	0,239,237,1,0,0,0,239,240,1,0,0,0,240,28,1,0,0,0,241,239,1,0,0,0,242,
  	243,5,60,0,0,243,244,5,60,0,0,244,248,1,0,0,0,245,247,3,7,3,0,246,245,
  	1,0,0,0,247,250,1,0,0,0,248,246,1,0,0,0,248,249,1,0,0,0,249,30,1,0,0,
  	0,250,248,1,0,0,0,251,252,5,62,0,0,252,253,5,62,0,0,253,257,1,0,0,0,254,
  	256,3,7,3,0,255,254,1,0,0,0,256,259,1,0,0,0,257,255,1,0,0,0,257,258,1,
  	0,0,0,258,32,1,0,0,0,259,257,1,0,0,0,260,261,5,62,0,0,261,262,5,61,0,
  	0,262,266,1,0,0,0,263,265,3,7,3,0,264,263,1,0,0,0,265,268,1,0,0,0,266,
  	264,1,0,0,0,266,267,1,0,0,0,267,34,1,0,0,0,268,266,1,0,0,0,269,270,5,
  	60,0,0,270,271,5,61,0,0,271,275,1,0,0,0,272,274,3,7,3,0,273,272,1,0,0,
  	0,274,277,1,0,0,0,275,273,1,0,0,0,275,276,1,0,0,0,276,36,1,0,0,0,277,
  	275,1,0,0,0,278,282,5,62,0,0,279,281,3,7,3,0,280,279,1,0,0,0,281,284,
  	1,0,0,0,282,280,1,0,0,0,282,283,1,0,0,0,283,38,1,0,0,0,284,282,1,0,0,
  	0,285,289,5,60,0,0,286,288,3,7,3,0,287,286,1,0,0,0,288,291,1,0,0,0,289,
  	287,1,0,0,0,289,290,1,0,0,0,290,40,1,0,0,0,291,289,1,0,0,0,292,296,5,
  	43,0,0,293,295,3,7,3,0,294,293,1,0,0,0,295,298,1,0,0,0,296,294,1,0,0,
  	0,296,297,1,0,0,0,297,42,1,0,0,0,298,296,1,0,0,0,299,303,5,45,0,0,300,
  	302,3,7,3,0,301,300,1,0,0,0,302,305,1,0,0,0,303,301,1,0,0,0,303,304,1,
  	0,0,0,304,44,1,0,0,0,305,303,1,0,0,0,306,310,5,42,0,0,307,309,3,7,3,0,
  	308,307,1,0,0,0,309,312,1,0,0,0,310,308,1,0,0,0,310,311,1,0,0,0,311,46,
  	1,0,0,0,312,310,1,0,0,0,313,317,5,47,0,0,314,316,3,7,3,0,315,314,1,0,
  	0,0,316,319,1,0,0,0,317,315,1,0,0,0,317,318,1,0,0,0,318,48,1,0,0,0,319,
  	317,1,0,0,0,320,324,5,37,0,0,321,323,3,7,3,0,322,321,1,0,0,0,323,326,
  	1,0,0,0,324,322,1,0,0,0,324,325,1,0,0,0,325,50,1,0,0,0,326,324,1,0,0,
  	0,327,331,5,33,0,0,328,330,3,7,3,0,329,328,1,0,0,0,330,333,1,0,0,0,331,
  	329,1,0,0,0,331,332,1,0,0,0,332,52,1,0,0,0,333,331,1,0,0,0,334,338,5,
  	124,0,0,335,337,3,7,3,0,336,335,1,0,0,0,337,340,1,0,0,0,338,336,1,0,0,
  	0,338,339,1,0,0,0,339,54,1,0,0,0,340,338,1,0,0,0,341,345,5,38,0,0,342,
  	344,3,7,3,0,343,342,1,0,0,0,344,347,1,0,0,0,345,343,1,0,0,0,345,346,1,
  	0,0,0,346,56,1,0,0,0,347,345,1,0,0,0,348,352,5,126,0,0,349,351,3,7,3,
  	0,350,349,1,0,0,0,351,354,1,0,0,0,352,350,1,0,0,0,352,353,1,0,0,0,353,
  	58,1,0,0,0,354,352,1,0,0,0,355,359,5,94,0,0,356,358,3,7,3,0,357,356,1,
  	0,0,0,358,361,1,0,0,0,359,357,1,0,0,0,359,360,1,0,0,0,360,60,1,0,0,0,
  	361,359,1,0,0,0,362,366,5,46,0,0,363,365,3,7,3,0,364,363,1,0,0,0,365,
  	368,1,0,0,0,366,364,1,0,0,0,366,367,1,0,0,0,367,62,1,0,0,0,368,366,1,
  	0,0,0,369,373,5,61,0,0,370,372,3,7,3,0,371,370,1,0,0,0,372,375,1,0,0,
  	0,373,371,1,0,0,0,373,374,1,0,0,0,374,64,1,0,0,0,375,373,1,0,0,0,376,
  	380,5,91,0,0,377,379,3,7,3,0,378,377,1,0,0,0,379,382,1,0,0,0,380,378,
  	1,0,0,0,380,381,1,0,0,0,381,66,1,0,0,0,382,380,1,0,0,0,383,387,5,93,0,
  	0,384,386,3,7,3,0,385,384,1,0,0,0,386,389,1,0,0,0,387,385,1,0,0,0,387,
  	388,1,0,0,0,388,68,1,0,0,0,389,387,1,0,0,0,390,394,5,123,0,0,391,393,
  	3,7,3,0,392,391,1,0,0,0,393,396,1,0,0,0,394,392,1,0,0,0,394,395,1,0,0,
  	0,395,70,1,0,0,0,396,394,1,0,0,0,397,401,5,125,0,0,398,400,3,7,3,0,399,
  	398,1,0,0,0,400,403,1,0,0,0,401,399,1,0,0,0,401,402,1,0,0,0,402,72,1,
  	0,0,0,403,401,1,0,0,0,404,408,5,40,0,0,405,407,3,7,3,0,406,405,1,0,0,
  	0,407,410,1,0,0,0,408,406,1,0,0,0,408,409,1,0,0,0,409,411,1,0,0,0,410,
  	408,1,0,0,0,411,412,6,36,0,0,412,74,1,0,0,0,413,417,5,41,0,0,414,416,
  	3,7,3,0,415,414,1,0,0,0,416,419,1,0,0,0,417,415,1,0,0,0,417,418,1,0,0,
  	0,418,420,1,0,0,0,419,417,1,0,0,0,420,421,6,37,0,0,421,76,1,0,0,0,422,
  	426,5,44,0,0,423,425,3,7,3,0,424,423,1,0,0,0,425,428,1,0,0,0,426,424,
  	1,0,0,0,426,427,1,0,0,0,427,429,1,0,0,0,428,426,1,0,0,0,429,430,6,38,
  	0,0,430,78,1,0,0,0,431,435,5,58,0,0,432,434,3,7,3,0,433,432,1,0,0,0,434,
  	437,1,0,0,0,435,433,1,0,0,0,435,436,1,0,0,0,436,438,1,0,0,0,437,435,1,
  	0,0,0,438,439,6,39,0,0,439,80,1,0,0,0,440,444,5,59,0,0,441,443,3,7,3,
  	0,442,441,1,0,0,0,443,446,1,0,0,0,444,442,1,0,0,0,444,445,1,0,0,0,445,
  	447,1,0,0,0,446,444,1,0,0,0,447,448,6,40,0,0,448,82,1,0,0,0,449,450,5,
  	98,0,0,450,451,5,111,0,0,451,452,5,111,0,0,452,453,5,108,0,0,453,457,
  	1,0,0,0,454,456,3,7,3,0,455,454,1,0,0,0,456,459,1,0,0,0,457,455,1,0,0,
  	0,457,458,1,0,0,0,458,84,1,0,0,0,459,457,1,0,0,0,460,461,5,99,0,0,461,
  	462,5,104,0,0,462,463,5,97,0,0,463,464,5,114,0,0,464,468,1,0,0,0,465,
  	467,3,7,3,0,466,465,1,0,0,0,467,470,1,0,0,0,468,466,1,0,0,0,468,469,1,
  	0,0,0,469,86,1,0,0,0,470,468,1,0,0,0,471,472,5,105,0,0,472,473,5,110,
  	0,0,473,474,5,116,0,0,474,478,1,0,0,0,475,477,3,7,3,0,476,475,1,0,0,0,
  	477,480,1,0,0,0,478,476,1,0,0,0,478,479,1,0,0,0,479,88,1,0,0,0,480,478,
  	1,0,0,0,481,482,5,108,0,0,482,483,5,111,0,0,483,484,5,110,0,0,484,485,
  	5,103,0,0,485,489,1,0,0,0,486,488,3,7,3,0,487,486,1,0,0,0,488,491,1,0,
  	0,0,489,487,1,0,0,0,489,490,1,0,0,0,490,90,1,0,0,0,491,489,1,0,0,0,492,
  	493,5,114,0,0,493,494,5,101,0,0,494,495,5,97,0,0,495,496,5,108,0,0,496,
  	500,1,0,0,0,497,499,3,7,3,0,498,497,1,0,0,0,499,502,1,0,0,0,500,498,1,
  	0,0,0,500,501,1,0,0,0,501,92,1,0,0,0,502,500,1,0,0,0,503,504,5,116,0,
  	0,504,505,5,114,0,0,505,506,5,117,0,0,506,507,5,101,0,0,507,511,1,0,0,
  	0,508,510,3,7,3,0,509,508,1,0,0,0,510,513,1,0,0,0,511,509,1,0,0,0,511,
  	512,1,0,0,0,512,94,1,0,0,0,513,511,1,0,0,0,514,515,5,102,0,0,515,516,
  	5,97,0,0,516,517,5,108,0,0,517,518,5,115,0,0,518,519,5,101,0,0,519,523,
  	1,0,0,0,520,522,3,7,3,0,521,520,1,0,0,0,522,525,1,0,0,0,523,521,1,0,0,
  	0,523,524,1,0,0,0,524,96,1,0,0,0,525,523,1,0,0,0,526,527,5,118,0,0,527,
  	528,5,111,0,0,528,529,5,105,0,0,529,530,5,100,0,0,530,534,1,0,0,0,531,
  	533,3,7,3,0,532,531,1,0,0,0,533,536,1,0,0,0,534,532,1,0,0,0,534,535,1,
  	0,0,0,535,98,1,0,0,0,536,534,1,0,0,0,537,538,5,98,0,0,538,539,5,114,0,
  	0,539,540,5,101,0,0,540,541,5,97,0,0,541,542,5,107,0,0,542,546,1,0,0,
  	0,543,545,3,7,3,0,544,543,1,0,0,0,545,548,1,0,0,0,546,544,1,0,0,0,546,
  	547,1,0,0,0,547,549,1,0,0,0,548,546,1,0,0,0,549,550,6,49,0,0,550,100,
  	1,0,0,0,551,552,5,114,0,0,552,553,5,101,0,0,553,554,5,116,0,0,554,555,
  	5,117,0,0,555,556,5,114,0,0,556,557,5,110,0,0,557,561,1,0,0,0,558,560,
  	3,7,3,0,559,558,1,0,0,0,560,563,1,0,0,0,561,559,1,0,0,0,561,562,1,0,0,
  	0,562,564,1,0,0,0,563,561,1,0,0,0,564,565,6,50,0,0,565,102,1,0,0,0,566,
  	567,5,101,0,0,567,568,5,110,0,0,568,569,5,100,0,0,569,573,1,0,0,0,570,
  	572,3,7,3,0,571,570,1,0,0,0,572,575,1,0,0,0,573,571,1,0,0,0,573,574,1,
  	0,0,0,574,576,1,0,0,0,575,573,1,0,0,0,576,577,6,51,0,0,577,104,1,0,0,
  	0,578,579,5,98,0,0,579,580,5,108,0,0,580,581,5,111,0,0,581,582,5,99,0,
  	0,582,583,5,107,0,0,583,587,1,0,0,0,584,586,3,7,3,0,585,584,1,0,0,0,586,
  	589,1,0,0,0,587,585,1,0,0,0,587,588,1,0,0,0,588,590,1,0,0,0,589,587,1,
  	0,0,0,590,591,6,52,0,0,591,106,1,0,0,0,592,593,5,105,0,0,593,594,5,102,
  	0,0,594,598,1,0,0,0,595,597,3,7,3,0,596,595,1,0,0,0,597,600,1,0,0,0,598,
  	596,1,0,0,0,598,599,1,0,0,0,599,601,1,0,0,0,600,598,1,0,0,0,601,602,6,
  	53,0,0,602,108,1,0,0,0,603,604,5,101,0,0,604,605,5,108,0,0,605,606,5,
  	115,0,0,606,607,5,101,0,0,607,611,1,0,0,0,608,610,3,7,3,0,609,608,1,0,
  	0,0,610,613,1,0,0,0,611,609,1,0,0,0,611,612,1,0,0,0,612,614,1,0,0,0,613,
  	611,1,0,0,0,614,615,6,54,0,0,615,110,1,0,0,0,616,617,5,100,0,0,617,618,
  	5,111,0,0,618,619,5,119,0,0,619,620,5,104,0,0,620,621,5,105,0,0,621,622,
  	5,108,0,0,622,623,5,101,0,0,623,627,1,0,0,0,624,626,3,7,3,0,625,624,1,
  	0,0,0,626,629,1,0,0,0,627,625,1,0,0,0,627,628,1,0,0,0,628,630,1,0,0,0,
  	629,627,1,0,0,0,630,631,6,55,0,0,631,112,1,0,0,0,632,633,5,119,0,0,633,
  	634,5,104,0,0,634,635,5,105,0,0,635,636,5,108,0,0,636,637,5,101,0,0,637,
  	641,1,0,0,0,638,640,3,7,3,0,639,638,1,0,0,0,640,643,1,0,0,0,641,639,1,
  	0,0,0,641,642,1,0,0,0,642,644,1,0,0,0,643,641,1,0,0,0,644,645,6,56,0,
  	0,645,114,1,0,0,0,646,647,5,102,0,0,647,648,5,111,0,0,648,649,5,114,0,
  	0,649,653,1,0,0,0,650,652,3,7,3,0,651,650,1,0,0,0,652,655,1,0,0,0,653,
  	651,1,0,0,0,653,654,1,0,0,0,654,656,1,0,0,0,655,653,1,0,0,0,656,657,6,
  	57,0,0,657,116,1,0,0,0,658,659,5,99,0,0,659,660,5,108,0,0,660,661,5,97,
  	0,0,661,662,5,115,0,0,662,663,5,115,0,0,663,667,1,0,0,0,664,666,3,7,3,
  	0,665,664,1,0,0,0,666,669,1,0,0,0,667,665,1,0,0,0,667,668,1,0,0,0,668,
  	670,1,0,0,0,669,667,1,0,0,0,670,671,6,58,0,0,671,118,1,0,0,0,672,673,
  	5,115,0,0,673,674,5,121,0,0,674,675,5,115,0,0,675,676,5,99,0,0,676,677,
  	5,97,0,0,677,678,5,108,0,0,678,679,5,108,0,0,679,683,1,0,0,0,680,682,
  	3,7,3,0,681,680,1,0,0,0,682,685,1,0,0,0,683,681,1,0,0,0,683,684,1,0,0,
  	0,684,686,1,0,0,0,685,683,1,0,0,0,686,687,6,59,0,0,687,120,1,0,0,0,688,
  	693,3,15,7,0,689,694,7,4,0,0,690,694,3,123,61,0,691,694,3,125,62,0,692,
  	694,3,127,63,0,693,689,1,0,0,0,693,690,1,0,0,0,693,691,1,0,0,0,693,692,
  	1,0,0,0,694,122,1,0,0,0,695,696,5,110,0,0,696,697,6,61,1,0,697,124,1,
  	0,0,0,698,699,5,116,0,0,699,700,6,62,2,0,700,126,1,0,0,0,701,702,5,114,
  	0,0,702,703,6,63,3,0,703,128,1,0,0,0,704,706,3,1,0,0,705,704,1,0,0,0,
  	706,707,1,0,0,0,707,705,1,0,0,0,707,708,1,0,0,0,708,712,1,0,0,0,709,711,
  	3,7,3,0,710,709,1,0,0,0,711,714,1,0,0,0,712,710,1,0,0,0,712,713,1,0,0,
  	0,713,130,1,0,0,0,714,712,1,0,0,0,715,717,3,1,0,0,716,715,1,0,0,0,717,
  	718,1,0,0,0,718,716,1,0,0,0,718,719,1,0,0,0,719,720,1,0,0,0,720,724,5,
  	46,0,0,721,723,3,1,0,0,722,721,1,0,0,0,723,726,1,0,0,0,724,722,1,0,0,
  	0,724,725,1,0,0,0,725,740,1,0,0,0,726,724,1,0,0,0,727,729,3,1,0,0,728,
  	727,1,0,0,0,729,732,1,0,0,0,730,728,1,0,0,0,730,731,1,0,0,0,731,733,1,
  	0,0,0,732,730,1,0,0,0,733,735,5,46,0,0,734,736,3,1,0,0,735,734,1,0,0,
  	0,736,737,1,0,0,0,737,735,1,0,0,0,737,738,1,0,0,0,738,740,1,0,0,0,739,
  	716,1,0,0,0,739,730,1,0,0,0,740,744,1,0,0,0,741,743,3,7,3,0,742,741,1,
  	0,0,0,743,746,1,0,0,0,744,742,1,0,0,0,744,745,1,0,0,0,745,132,1,0,0,0,
  	746,744,1,0,0,0,747,750,3,11,5,0,748,751,8,5,0,0,749,751,3,121,60,0,750,
  	748,1,0,0,0,750,749,1,0,0,0,751,752,1,0,0,0,752,756,3,11,5,0,753,755,
  	3,7,3,0,754,753,1,0,0,0,755,758,1,0,0,0,756,754,1,0,0,0,756,757,1,0,0,
  	0,757,134,1,0,0,0,758,756,1,0,0,0,759,764,3,13,6,0,760,763,8,6,0,0,761,
  	763,3,121,60,0,762,760,1,0,0,0,762,761,1,0,0,0,763,766,1,0,0,0,764,762,
  	1,0,0,0,764,765,1,0,0,0,765,767,1,0,0,0,766,764,1,0,0,0,767,771,3,13,
  	6,0,768,770,3,7,3,0,769,768,1,0,0,0,770,773,1,0,0,0,771,769,1,0,0,0,771,
  	772,1,0,0,0,772,136,1,0,0,0,773,771,1,0,0,0,774,777,3,1,0,0,775,777,3,
  	5,2,0,776,774,1,0,0,0,776,775,1,0,0,0,777,783,1,0,0,0,778,782,3,1,0,0,
  	779,782,3,3,1,0,780,782,3,5,2,0,781,778,1,0,0,0,781,779,1,0,0,0,781,780,
  	1,0,0,0,782,785,1,0,0,0,783,781,1,0,0,0,783,784,1,0,0,0,784,789,1,0,0,
  	0,785,783,1,0,0,0,786,788,3,7,3,0,787,786,1,0,0,0,788,791,1,0,0,0,789,
  	787,1,0,0,0,789,790,1,0,0,0,790,138,1,0,0,0,791,789,1,0,0,0,76,0,148,
  	153,169,174,179,191,201,212,221,230,239,248,257,266,275,282,289,296,303,
  	310,317,324,331,338,345,352,359,366,373,380,387,394,401,408,417,426,435,
  	444,457,468,478,489,500,511,523,534,546,561,573,587,598,611,627,641,653,
  	667,683,693,707,712,718,724,730,737,739,744,750,756,762,764,771,776,781,
  	783,789,4,6,0,0,1,61,0,1,62,1,1,63,2
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  bazlexerLexerStaticData = staticData.release();
}

}

BazLexer::BazLexer(CharStream *input) : Lexer(input) {
  BazLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *bazlexerLexerStaticData->atn, bazlexerLexerStaticData->decisionToDFA, bazlexerLexerStaticData->sharedContextCache);
}

BazLexer::~BazLexer() {
  delete _interpreter;
}

std::string BazLexer::getGrammarFileName() const {
  return "Baz.g4";
}

const std::vector<std::string>& BazLexer::getRuleNames() const {
  return bazlexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& BazLexer::getChannelNames() const {
  return bazlexerLexerStaticData->channelNames;
}

const std::vector<std::string>& BazLexer::getModeNames() const {
  return bazlexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& BazLexer::getVocabulary() const {
  return bazlexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView BazLexer::getSerializedATN() const {
  return bazlexerLexerStaticData->serializedATN;
}

const atn::ATN& BazLexer::getATN() const {
  return *bazlexerLexerStaticData->atn;
}


void BazLexer::action(RuleContext *context, size_t ruleIndex, size_t actionIndex) {
  switch (ruleIndex) {
    case 61: ESCLINEAction(antlrcpp::downCast<antlr4::RuleContext *>(context), actionIndex); break;
    case 62: ESCTABAction(antlrcpp::downCast<antlr4::RuleContext *>(context), actionIndex); break;
    case 63: ESCRETAction(antlrcpp::downCast<antlr4::RuleContext *>(context), actionIndex); break;

  default:
    break;
  }
}

void BazLexer::ESCLINEAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 0:  setText("\n");  break;

  default:
    break;
  }
}

void BazLexer::ESCTABAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 1:  setText("\t");  break;

  default:
    break;
  }
}

void BazLexer::ESCRETAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 2:  setText("\r");  break;

  default:
    break;
  }
}



void BazLexer::initialize() {
  ::antlr4::internal::call_once(bazlexerLexerOnceFlag, bazlexerLexerInitialize);
}
